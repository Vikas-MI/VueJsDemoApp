{"ast":null,"code":"import \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n/**\n  * vee-validate v4.8.6\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, ref, watch, unref, isRef, reactive, onUnmounted, nextTick, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n  return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  }\n  // this is for IE and Cypress #3161\n  /* istanbul ignore next */\n  if (evt && evt.srcElement) {\n    return true;\n  }\n  return false;\n}\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n  if (a === b) return true;\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false;\n    // eslint-disable-next-line no-var\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (!isEqual(a[i], b[i])) return false;\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      for (i of a.entries()) if (!isEqual(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n    // We added this part for file comparison, arguably a little naive but should work for most cases.\n    // #3911\n    if (isFile(a) && isFile(b)) {\n      if (a.size !== b.size) return false;\n      if (a.name !== b.name) return false;\n      if (a.lastModified !== b.lastModified) return false;\n      if (a.type !== b.type) return false;\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n      return true;\n    }\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    for (i = length; i-- !== 0;) {\n      // eslint-disable-next-line no-var\n      var key = keys[i];\n      if (!isEqual(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b;\n}\nfunction isFile(a) {\n  if (!isClient) {\n    return false;\n  }\n  return a instanceof File;\n}\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n    k,\n    list,\n    tmp,\n    str = Object.prototype.toString.call(x);\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n  return tmp || x;\n}\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n  return path;\n}\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    }\n    // Key does not exist, create a container for it\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n    acc = acc[keys[i]];\n  }\n}\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    }\n    // Key does not exist, exit\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n    acc = acc[keys[i]];\n  }\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n  return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\n * Ensures we deal with a singular field value\n */\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n  return field;\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue];\n    // Use isEqual since checked object values can possibly fail the equality check #3883\n    const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n  return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n    return lastResult;\n  };\n}\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return value;\n  }\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n  return value;\n}\nfunction withLatest(fn, onDone) {\n  let latestRun;\n  return async function runLatest(...args) {\n    const pending = fn(...args);\n    latestRun = pending;\n    const result = await pending;\n    if (pending !== latestRun) {\n      return result;\n    }\n    latestRun = undefined;\n    onDone(result, args);\n    return result;\n  };\n}\nfunction computedDeep({\n  get,\n  set\n}) {\n  const baseRef = ref(klona(get()));\n  watch(get, newValue => {\n    if (isEqual(newValue, baseRef.value)) {\n      return;\n    }\n    baseRef.value = klona(newValue);\n  }, {\n    deep: true\n  });\n  watch(baseRef, newValue => {\n    if (isEqual(newValue, get())) {\n      return;\n    }\n    set(klona(newValue));\n  }, {\n    deep: true\n  });\n  return baseRef;\n}\nfunction unravel(value) {\n  if (isCallable(value)) {\n    return value();\n  }\n  return unref(value);\n}\nfunction lazyToRef(value) {\n  return computed(() => unravel(value));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n  return {\n    default: () => {\n      var _a, _b;\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n  return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n  const input = value.target;\n  // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  }\n  // makes sure we get the actual `option` bound value\n  // #3440\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n  return input.value;\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n  if (!rules) {\n    return acc;\n  }\n  // Object is already normalized, skip.\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n    if (!parsedRule.name) {\n      return prev;\n    }\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n  if (Array.isArray(params)) {\n    return params;\n  }\n  if (isObject(params)) {\n    return params;\n  }\n  return [params];\n}\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n    return value;\n  };\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  }\n  // #3073\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n  return {\n    name,\n    params\n  };\n};\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n  locator.__locatorRef = value;\n  return locator;\n}\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    label: options === null || options === void 0 ? void 0 : options.label,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n  if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n    return validateFieldWithTypedSchema(value, field.rules);\n  }\n  // if a generic function or chain of generic functions\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.label || field.name,\n      name: field.name,\n      label: field.label,\n      form: field.formData,\n      value\n    };\n    // Normalize the pipeline\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && result;\n      if (isValid) {\n        continue;\n      }\n      const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n      errors.push(message);\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n    return {\n      errors\n    };\n  }\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n    if (result.error) {\n      errors.push(result.error);\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n  return {\n    errors\n  };\n}\nfunction isYupError(err) {\n  return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n  const schema = {\n    __type: 'VVTypedSchema',\n    async parse(values) {\n      var _a;\n      try {\n        const output = await yupSchema.validate(values, {\n          abortEarly: false\n        });\n        return {\n          output,\n          errors: []\n        };\n      } catch (err) {\n        // Yup errors have a name prop one them.\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n        if (!isYupError(err)) {\n          throw err;\n        }\n        if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n          return {\n            errors: [{\n              path: err.path,\n              errors: err.errors\n            }]\n          };\n        }\n        const errors = err.inner.reduce((acc, curr) => {\n          const path = curr.path || '';\n          if (!acc[path]) {\n            acc[path] = {\n              errors: [],\n              path\n            };\n          }\n          acc[path].errors.push(...curr.errors);\n          return acc;\n        }, {});\n        return {\n          errors: Object.values(errors)\n        };\n      }\n    }\n  };\n  return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const result = await typedSchema.parse(value);\n  const messages = [];\n  for (const error of result.errors) {\n    if (error.errors.length) {\n      messages.push(...error.errors);\n    }\n  }\n  return {\n    errors: messages\n  };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.label || field.name,\n    name: field.name,\n    label: field.label,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n  if (!message) {\n    return 'Field is invalid';\n  }\n  return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n    return value;\n  };\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\nasync function validateTypedSchema(schema, values) {\n  const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n  const validationResult = await typedSchema.parse(values);\n  const results = {};\n  const errors = {};\n  for (const error of validationResult.errors) {\n    const messages = error.errors;\n    // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n    const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n      return `[${m}]`;\n    });\n    results[path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n    if (messages.length) {\n      errors[path] = messages[0];\n    }\n  }\n  return {\n    valid: !validationResult.errors.length,\n    results,\n    errors,\n    values: validationResult.value\n  };\n}\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n    const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n      label: strings === null || strings === void 0 ? void 0 : strings.label,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, init.form);\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, init.form);\n  const meta = _useFieldMeta(value, initialValue, errors);\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n  function setState(state) {\n    var _a;\n    if ('value' in state) {\n      value.value = state.value;\n    }\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n  const modelRef = ref(unref(modelValue));\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n    form.stageInitialValue(unref(path), value, true);\n  }\n  const initialValue = computed(resolveInitialValue);\n  // if no form is associated, use a regular ref.\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  }\n  // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n  const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n  form.stageInitialValue(unref(path), currentValue, true);\n  // otherwise use a computed setter that triggers the `setFieldValue`\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n  if (isRef(modelValue)) {\n    return unref(modelValue);\n  }\n  if (modelValue !== undefined) {\n    return modelValue;\n  }\n  return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !isEqual(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction _useFieldErrors(path, form) {\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n    return Array.isArray(messages) ? messages : [messages];\n  }\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n    if (!app) {\n      return;\n    }\n    installDevtoolsPlugin(app);\n  }\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        await SELECTED_NODE.validate();\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n    SELECTED_NODE = null;\n  });\n}\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n    if (!fieldInstance) {\n      return;\n    }\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n      if (!field) {\n        return {};\n      }\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n    if (!form) {\n      return {};\n    }\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {\n    // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n  return {};\n}\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n        if (message) {\n          acc[key] = message;\n        }\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(path, rules, opts);\n  }\n  return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    controlled,\n    keepValueOnUnmount,\n    modelPropName,\n    syncVModel,\n    form: controlForm\n  } = normalizeOptions(opts);\n  const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n  const form = controlForm || injectedForm;\n  const name = lazyToRef(path);\n  // a flag indicating if the field is about to be removed/unmounted.\n  let markedForRemoval = false;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    form\n  });\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: modelPropName,\n      handleChange\n    });\n  }\n  /**\n   * Handles common onBlur meta update\n   */\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n    if (schema && !isYupValidator(schema) && !isTypedSchema(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n    if (isYupValidator(rulesValue) || isTypedSchema(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n    return normalizeRules(rulesValue);\n  });\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n    return validate(value.value, normalizedRules.value, {\n      name: unref(name),\n      label: unref(label),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n  const validateWithStateMutation = withLatest(async () => {\n    meta.pending = true;\n    meta.validated = true;\n    return validateCurrentValue('validated-only');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n      result.errors = [];\n    }\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  });\n  const validateValidStateOnly = withLatest(async () => {\n    return validateCurrentValue('silent');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n    }\n    meta.valid = result.valid;\n    return result;\n  });\n  function validate$1(opts) {\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n      return validateValidStateOnly();\n    }\n    return validateWithStateMutation();\n  }\n  // Common input/change event handler\n  function handleChange(e, shouldValidate = true) {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  }\n  // Runs the initial validation\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    }\n    // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n  let unwatchValue;\n  let lastWatchedValue = klona(value.value);\n  function watchValue() {\n    unwatchValue = watch(value, (val, oldVal) => {\n      if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\n        return;\n      }\n      const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n      validateFn();\n      lastWatchedValue = klona(val);\n    }, {\n      deep: true\n    });\n  }\n  watchValue();\n  function resetField(state) {\n    var _a;\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly();\n    // need to watch at next tick to avoid triggering the value watcher\n    nextTick(() => {\n      watchValue();\n    });\n  }\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (isEqual(value, oldValue)) {\n        return;\n      }\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  }\n  // if no associated form return the field API immediately\n  if (!form) {\n    return field;\n  }\n  // associate the field with the given form\n  form.register(field);\n  onBeforeUnmount(() => {\n    markedForRemoval = true;\n    form.unregister(field);\n  });\n  // extract cross-field dependencies in a computed prop\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value;\n    // is falsy, a function schema or a yup schema\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || isTypedSchema(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  });\n  // Adds a watcher that runs the validation whenever field dependencies change\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n    const shouldValidate = !isEqual(deps, oldDeps);\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n  var _a;\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    label: undefined,\n    validateOnValueUpdate: true,\n    keepValueOnUnmount: undefined,\n    modelPropName: 'modelValue',\n    syncVModel: true,\n    controlled: true\n  });\n  const isVModelSynced = (_a = opts === null || opts === void 0 ? void 0 : opts.syncVModel) !== null && _a !== void 0 ? _a : true;\n  const initialValue = isVModelSynced && !('initialValue' in (opts || {})) ? getCurrentModelValue(getCurrentInstance(), (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue') : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n  if (!opts) {\n    return Object.assign(Object.assign({}, defaults()), {\n      initialValue\n    });\n  }\n  // TODO: Deprecate this in next major release\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    initialValue,\n    controlled: controlled !== null && controlled !== void 0 ? controlled : true,\n    checkedValue\n  });\n}\n/**\n * Extracts the validation rules from a schema\n */\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  }\n  // there is a key on the schema object for this field\n  return schema[fieldName];\n}\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0 : isEqual(checkedVal, currentValue);\n    });\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a;\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        if (shouldValidate) {\n          field.validate();\n        }\n        return;\n      }\n      let newValue = normalizeEventValue(e);\n      // Single checkbox field without a form to toggle it's value\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n      handleChange(newValue, shouldValidate);\n    }\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\nfunction useVModel({\n  prop,\n  value,\n  handleChange\n}) {\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n  if (!vm) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n    return;\n  }\n  const propName = prop || 'modelValue';\n  const emitName = `update:${propName}`;\n  // Component doesn't have a model prop setup (must be defined on the props)\n  if (!(propName in vm.props)) {\n    return;\n  }\n  watch(value, newValue => {\n    if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n    if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n      return;\n    }\n    handleChange(newValue);\n  });\n}\nfunction getCurrentModelValue(vm, propName) {\n  if (!vm) {\n    return undefined;\n  }\n  return vm.props[propName];\n}\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false,\n      keepValueOnUnmount: keepValue\n    });\n    // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n    const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    };\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n    const onInputHandler = function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    };\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n      const tag = resolveTag(props, ctx);\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n      return attrs;\n    });\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n      return children;\n    };\n  }\n});\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n  return tag;\n}\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\nfunction resolveInitialValues(opts) {\n  const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n  const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n  if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n    return klona(schema.cast(providedValues) || {});\n  }\n  return klona(providedValues);\n}\nfunction useForm(opts) {\n  var _a;\n  const formId = FORM_COUNTER++;\n  const controlledModelPaths = new Set();\n  // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n  let RESET_LOCK = false;\n  // A lookup containing fields or field groups\n  const fieldsByPath = ref({});\n  // If the form is currently submitting\n  const isSubmitting = ref(false);\n  // The number of times the user tried to submit the form\n  const submitCount = ref(0);\n  // field arrays managed by this form\n  const fieldArrays = [];\n  // a private ref for all form values\n  const formValues = reactive(resolveInitialValues(opts));\n  // the source of errors for the form fields\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\n  // Gets the first error of each field\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n      return acc;\n    }, {});\n  });\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\n   * Holds a computed reference to all fields names and labels\n   */\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n      if (field) {\n        names[path] = {\n          name: unref(field.name) || '',\n          label: unref(field.label) || ''\n        };\n      }\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n      const field = getFirstFieldAtPath(path);\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n      return map;\n    }, {});\n  });\n  // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n  // initial form values\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts);\n  // form meta aggregations\n  const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n  const controlledValues = computed(() => {\n    return [...controlledModelPaths, ...keysOf(fieldsByPath.value)].reduce((acc, path) => {\n      const value = getFromPath(formValues, path);\n      setInPath(acc, path, value);\n      return acc;\n    }, {});\n  });\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  /**\n   * Batches validation runs in 5ms batches\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\n   */\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n  const validateSchema = withLatest(async mode => {\n    return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n  }, (formResult, [mode]) => {\n    // fields by id lookup\n    const fieldsById = formCtx.fieldsByPath.value || {};\n    // errors fields names, we need it to also check if custom errors are updated\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n    // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])];\n    // aggregates the paths into a single result object while applying the results on the fields\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      }\n      // field not rendered\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      }\n      // always update the valid flag regardless of the mode\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n      if (mode === 'silent') {\n        return validation;\n      }\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  });\n  function makeSubmissionFactory(onlyControlled) {\n    return function submitHandlerFactory(fn, onValidationError) {\n      return function submissionHandler(e) {\n        if (e instanceof Event) {\n          e.preventDefault();\n          e.stopPropagation();\n        }\n        // Touch all fields\n        setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n          acc[field] = true;\n          return acc;\n        }, {}));\n        isSubmitting.value = true;\n        submitCount.value++;\n        return validate().then(result => {\n          const values = klona(formValues);\n          if (result.valid && typeof fn === 'function') {\n            const controlled = klona(controlledValues.value);\n            let submittedValues = onlyControlled ? controlled : values;\n            if (result.values) {\n              submittedValues = result.values;\n            }\n            return fn(submittedValues, {\n              evt: e,\n              controlledValues: controlled,\n              setErrors,\n              setFieldError,\n              setTouched,\n              setFieldTouched,\n              setValues,\n              setFieldValue,\n              resetForm,\n              resetField\n            });\n          }\n          if (!result.valid && typeof onValidationError === 'function') {\n            onValidationError({\n              values,\n              evt: e,\n              errors: result.errors,\n              results: result.results\n            });\n          }\n        }).then(returnVal => {\n          isSubmitting.value = false;\n          return returnVal;\n        }, err => {\n          isSubmitting.value = false;\n          // re-throw the err so it doesn't go silent\n          throw err;\n        });\n      };\n    };\n  }\n  const handleSubmitImpl = makeSubmissionFactory(false);\n  const handleSubmit = handleSubmitImpl;\n  handleSubmit.withControlled = makeSubmissionFactory(true);\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    controlledValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    resetField,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel\n  };\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n    return mutation(fieldOrGroup);\n  }\n  function mutateAllFields(mutation) {\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      }\n      // avoid resetting the field values, because they should've been reset already.\n      applyFieldMutation(field, mutation);\n    });\n  }\n  /**\n   * Manually sets an error message on a specific field\n   */\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\n   * Sets errors for the fields specified in the object\n   */\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\n   * Sets a single field value\n   */\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value);\n    // field wasn't found, create a virtual field as a placeholder\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n    let newValue = clonedValue;\n    // Single Checkbox: toggles the field value unless the field is being reset then force it\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n    setInPath(formValues, field, newValue);\n  }\n  /**\n   * Sets multiple fields values\n   */\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    });\n    // set up new values\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    });\n    // regenerate the arrays when the form values change\n    fieldArrays.forEach(f => f && f.reset());\n  }\n  function createModel(path) {\n    const {\n      value\n    } = _useFieldValue(path, undefined, formCtx);\n    watch(value, () => {\n      if (!fieldExists(unref(path))) {\n        validate({\n          mode: 'validated-only'\n        });\n      }\n    }, {\n      deep: true\n    });\n    controlledModelPaths.add(unref(path));\n    return value;\n  }\n  function useFieldModel(path) {\n    if (!Array.isArray(path)) {\n      return createModel(path);\n    }\n    return path.map(createModel);\n  }\n  /**\n   * Sets the touched meta state on a field\n   */\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\n   * Sets the touched meta state on multiple fields\n   */\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  function resetField(field, state) {\n    const fieldInstance = fieldsByPath.value[field];\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.resetField(state));\n    }\n  }\n  /**\n   * Resets all fields\n   */\n  function resetForm(state) {\n    RESET_LOCK = true;\n    // Reset all field states first\n    mutateAllFields(f => f.resetField());\n    // reset values\n    const newValues = (state === null || state === void 0 ? void 0 : state.values) ? state.values : originalInitialValues.value;\n    setInitialValues(newValues);\n    setValues(newValues);\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path;\n    // first field at that path\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    }\n    // add the new array to that path\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n    if (!fieldAtPath) {\n      return;\n    }\n    // same field at path\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n      if (idx === -1) {\n        return;\n      }\n      fieldAtPath.splice(idx, 1);\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath);\n        // re-validate if either path had errors before\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          // clear up both paths errors\n          setFieldError(oldPath, undefined);\n          validateField(newPath);\n        }\n        // clean up the old path if no other field is sharing that name\n        // #3325\n        await nextTick();\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    }\n    // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n    const initialErrorMessage = unref(field.errorMessage);\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    }\n    // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n    delete initialErrors[fieldPath];\n  }\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    const fieldInstance = fieldsByPath.value[fieldName];\n    const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n    removeFieldFromPath(field, fieldName);\n    // clears a field error on unmounted\n    // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n    nextTick(() => {\n      var _a;\n      const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n      const currentGroupValue = getFromPath(formValues, fieldName);\n      // The boolean here is we check if the field still belongs to the same control group with that name\n      // if another group claimed the name, we should avoid handling it since it is no longer the same group\n      // this happens with `v-for` over some checkboxes and field arrays.\n      // also if the group no longer exist we can assume this group was the last one that controlled it\n      const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\n      // group field that still has a dangling value, the field may exist or not after it was removed.\n      // This used to be handled in the useField composable but the form has better context on when it should/not happen.\n      // if it does belong to it that means the group still exists\n      // #3844\n      if (isSameGroup && !shouldKeepValue) {\n        if (Array.isArray(currentGroupValue)) {\n          const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\n          if (valueIdx > -1) {\n            const newVal = [...currentGroupValue];\n            newVal.splice(valueIdx, 1);\n            setFieldValue(fieldName, newVal, {\n              force: true\n            });\n          }\n        } else if (currentGroupValue === unref(field.checkedValue)) {\n          // Remove field if it is a group but does not have an array value, like for radio inputs #3963\n          unsetPath(formValues, fieldName);\n        }\n      }\n      // Field was removed entirely, we should unset its path\n      // #3384\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined);\n        // Checks if the field was configured to be unset during unmount or not\n        // Checks both the form-level config and field-level one\n        // Field has the priority if it is set, otherwise it goes to the form settings\n        if (shouldKeepValue) {\n          return;\n        }\n        // Don't apply emptyContainer check unless the current group value is an array\n        if (isGroup && Array.isArray(currentGroupValue) && !isEmptyContainer(currentGroupValue)) {\n          return;\n        }\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n  async function validate(opts) {\n    const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n    if (mode === 'force') {\n      mutateAllFields(f => f.meta.validated = true);\n    }\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema(mode);\n    }\n    // No schema, each field is responsible to validate itself\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n    return fieldInstance.validate();\n  }\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\n   * Sneaky function to set initial field values\n   */\n  function stageInitialValue(path, value, updateOriginal = false) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n    if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n    const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue) ? await validateTypedSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  });\n  // Trigger initial validation\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    }\n    // if validate on mount was enabled\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    }\n    // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  }\n  // Provide injections\n  provide(FormContextKey, formCtx);\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n  return Object.assign(Object.assign({}, formCtx), {\n    handleReset: () => resetForm(),\n    submitForm\n  });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !isEqual(currentValues, unref(initialValues));\n  });\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(fields, formValues, opts) {\n  const values = resolveInitialValues(opts);\n  const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(values);\n  // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n  const originalInitialValues = ref(klona(values));\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n    if (!updateFields) {\n      return;\n    }\n    // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n      if (!field || wasTouched) {\n        return;\n      }\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\n   * Manually sets an error message on a specific field\n   */\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\n   * Sets errors for the fields specified in the object\n   */\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n      return acc;\n    }, {});\n  }\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      errorBag,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      controlledValues,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetField\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, {\n      evt\n    }) => {\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n      handleReset();\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n    function getValues() {\n      return klona(values);\n    }\n    function getMeta() {\n      return klona(meta.value);\n    }\n    function getErrors() {\n      return klona(errors.value);\n    }\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        errorBag: errorBag.value,\n        values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        controlledValues: controlledValues.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        getValues,\n        getMeta,\n        getErrors\n      };\n    }\n    // expose these functions and methods as part of public API\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField,\n      resetField,\n      getValues,\n      getMeta,\n      getErrors\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n      if (!props.as) {\n        return children;\n      }\n      // Attributes to add on a native `form` tag\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n});\nconst Form = FormImpl;\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]);\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  const noOp = () => {};\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n  let entryCounter = 0;\n  function getCurrentValues() {\n    return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n  }\n  function initFields() {\n    const currentValues = getCurrentValues();\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n  initFields();\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computedDeep({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n          if (idx === -1) {\n            warn(`Attempting to update a non-existent array item`);\n            return;\n          }\n          update(idx, value);\n        }\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n  function afterMutation() {\n    updateEntryFlags();\n    // Should trigger a silent validation since a field may not do that #4096\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'silent'\n    });\n  }\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    afterMutation();\n  }\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    afterMutation();\n  }\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    // the old switcheroo\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n    afterMutation();\n  }\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'validated-only'\n    });\n  }\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    afterMutation();\n  }\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    afterMutation();\n  }\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  // Makes sure to sync the form values with the array value if they go out of sync\n  // #4153\n  watch(getCurrentValues, formValues => {\n    const fieldsValues = fields.value.map(f => f.value);\n    // If form values are not the same as the current values then something overrode them.\n    if (!isEqual(formValues, fieldsValues)) {\n      initFields();\n    }\n  });\n  return fieldArrayCtx;\n}\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs);\n      // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      }\n      // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n      return h(tag, attrs, children);\n    };\n  }\n});\nconst ErrorMessage = ErrorMessageImpl;\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n    return form.resetForm(state);\n  };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.dirty;\n  });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.touched;\n  });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n    return field.meta.valid;\n  });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n    return field.validate();\n  };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n    return form.validate();\n  };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    var _a;\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey);\n  // We don't want to use self injected context as it doesn't make sense\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n    return onSubmit(e);\n  };\n}\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };","map":{"version":3,"names":["getCurrentInstance","inject","warn","warn$1","computed","ref","watch","unref","isRef","reactive","onUnmounted","nextTick","onMounted","provide","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isTypedSchema","parse","__type","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","isEqual","a","b","constructor","i","Map","size","entries","has","get","isFile","name","lastModified","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key","File","set","val","klona","enumerable","configurable","writable","defineProperty","x","k","list","tmp","str","create","__proto__","forEach","add","Date","buffer","slice","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","clearTimeout","result","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","runLatest","pending","computedDeep","baseRef","newValue","deep","unravel","lazyToRef","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","label","formData","values","_validate","errors","valid","validateFieldWithTypedSchema","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","isYupError","err","yupToTypedSchema","yupSchema","schema","output","abortEarly","typedSchema","messages","fillTargetValues","fieldCtx","normalize","param","validateTypedSchema","validationResult","results","m","validateObjectSchema","opts","paths","validations","_c","strings","names","fieldResult","bailsMap","isAllValid","validationResults","all","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","modelRef","resolveInitialValue","initialValues","stageInitialValue","resolveModelValue","setFieldValue","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","indexOf","idObject","f","ff","btoa","JSON","stringify","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","controlled","keepValueOnUnmount","modelPropName","syncVModel","controlForm","normalizeOptions","injectedForm","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","setTouched","isTouched","unwatchValue","lastWatchedValue","watchValue","oldVal","validateFn","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","isVModelSynced","getCurrentModelValue","valueProp","standalone","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","propName","emitName","props","emit","propValue","modelModifiers","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","validateField","onChangeHandler","handleChangeWithModel","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","_d","Field","FORM_COUNTER","resolveInitialValues","providedValues","validationSchema","cast","useForm","controlledModelPaths","RESET_LOCK","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","keepValuesOnUnmount","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","controlledValues","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","fieldsById","formCtx","currentErrorsPaths","validation","setFieldError","applyFieldMutation","wasValidated","some","makeSubmissionFactory","onlyControlled","submitHandlerFactory","onValidationError","submissionHandler","preventDefault","stopPropagation","then","submittedValues","setFieldTouched","setValues","returnVal","handleSubmitImpl","handleSubmit","withControlled","registerField","unregisterField","unsetInitialValue","setFieldInitialValue","useFieldModel","isFieldGroup","mutation","mutateAllFields","force","clonedValue","createModel","newValues","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","newPath","oldPath","initialErrorMessage","shouldKeepValue","currentGroupValue","isSameGroup","valueIdx","every","updateOriginal","schemaValue","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","getValues","getMeta","getErrors","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","getCurrentValues","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","afterMutation","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","fieldsValues","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb","validateObject"],"sources":["/Applications/MAMP/htdocs/Vue/Demo/restaurant-app/restaurent-app/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.8.6\n  * (c) 2023 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, computed, ref, watch, unref, isRef, reactive, onUnmounted, nextTick, onMounted, provide, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n    return typeof fn === 'function';\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\nfunction isIndex(value) {\n    return Number(value) >= 0;\n}\nfunction toNumber(value) {\n    const n = parseFloat(value);\n    return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\n * Adds a custom validator to the list of validation rules.\n */\nfunction defineRule(id, validator) {\n    // makes sure new rules are properly formatted.\n    guardExtend(id, validator);\n    RULES[id] = validator;\n}\n/**\n * Gets an already defined rule\n */\nfunction resolveRule(id) {\n    return RULES[id];\n}\n/**\n * Guards from extension violations.\n */\nfunction guardExtend(id, validator) {\n    if (isCallable(validator)) {\n        return;\n    }\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\nfunction isLocator(value) {\n    return isCallable(value) && !!value.__locatorRef;\n}\nfunction isTypedSchema(value) {\n    return !!value && isCallable(value.parse) && value.__type === 'VVTypedSchema';\n}\nfunction isYupValidator(value) {\n    return !!value && isCallable(value.validate);\n}\nfunction hasCheckedAttr(type) {\n    return type === 'checkbox' || type === 'radio';\n}\nfunction isContainerValue(value) {\n    return isObject(value) || Array.isArray(value);\n}\n/**\n * True if the value is an empty object or array\n */\nfunction isEmptyContainer(value) {\n    if (Array.isArray(value)) {\n        return value.length === 0;\n    }\n    return isObject(value) && Object.keys(value).length === 0;\n}\n/**\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\n */\nfunction isNotNestedPath(path) {\n    return /^\\[.+\\]$/i.test(path);\n}\n/**\n * Checks if an element is a native HTML5 multi-select input element\n */\nfunction isNativeMultiSelect(el) {\n    return isNativeSelect(el) && el.multiple;\n}\n/**\n * Checks if an element is a native HTML5 select input element\n */\nfunction isNativeSelect(el) {\n    return el.tagName === 'SELECT';\n}\n/**\n * Checks if a tag name with attrs object will render a native multi-select element\n */\nfunction isNativeMultiSelectNode(tag, attrs) {\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\n * Checks if a node should have a `:value` binding or not\n *\n * These nodes should not have a value binding\n * For files, because they are not reactive\n * For multi-selects because the value binding will reset the value\n */\nfunction shouldHaveValueBinding(tag, attrs) {\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\nfunction isFormSubmitEvent(evt) {\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\nfunction isEvent(evt) {\n    if (!evt) {\n        return false;\n    }\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n        return true;\n    }\n    // this is for IE and Cypress #3161\n    /* istanbul ignore next */\n    if (evt && evt.srcElement) {\n        return true;\n    }\n    return false;\n}\nfunction isPropPresent(obj, prop) {\n    return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\n * Compares if two values are the same borrowed from:\n * https://github.com/epoberezkin/fast-deep-equal\n * We added a case for file matching since `Object.keys` doesn't work with Files.\n * */\nfunction isEqual(a, b) {\n    if (a === b)\n        return true;\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\n        if (a.constructor !== b.constructor)\n            return false;\n        // eslint-disable-next-line no-var\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (!isEqual(a[i], b[i]))\n                    return false;\n            return true;\n        }\n        if (a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            for (i of a.entries())\n                if (!isEqual(i[1], b.get(i[0])))\n                    return false;\n            return true;\n        }\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\n        // #3911\n        if (isFile(a) && isFile(b)) {\n            if (a.size !== b.size)\n                return false;\n            if (a.name !== b.name)\n                return false;\n            if (a.lastModified !== b.lastModified)\n                return false;\n            if (a.type !== b.type)\n                return false;\n            return true;\n        }\n        if (a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size)\n                return false;\n            for (i of a.entries())\n                if (!b.has(i[0]))\n                    return false;\n            return true;\n        }\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n            length = a.length;\n            // eslint-disable-next-line eqeqeq\n            if (length != b.length)\n                return false;\n            for (i = length; i-- !== 0;)\n                if (a[i] !== b[i])\n                    return false;\n            return true;\n        }\n        if (a.constructor === RegExp)\n            return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf)\n            return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString)\n            return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length)\n            return false;\n        for (i = length; i-- !== 0;)\n            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))\n                return false;\n        for (i = length; i-- !== 0;) {\n            // eslint-disable-next-line no-var\n            var key = keys[i];\n            if (!isEqual(a[key], b[key]))\n                return false;\n        }\n        return true;\n    }\n    // true if both NaN, false otherwise\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isFile(a) {\n    if (!isClient) {\n        return false;\n    }\n    return a instanceof File;\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction cleanupNonNestedPath(path) {\n    if (isNotNestedPath(path)) {\n        return path.replace(/\\[|\\]/gi, '');\n    }\n    return path;\n}\nfunction getFromPath(object, path, fallback) {\n    if (!object) {\n        return fallback;\n    }\n    if (isNotNestedPath(path)) {\n        return object[cleanupNonNestedPath(path)];\n    }\n    const resolvedValue = (path || '')\n        .split(/\\.|\\[(\\d+)\\]/)\n        .filter(Boolean)\n        .reduce((acc, propKey) => {\n        if (isContainerValue(acc) && propKey in acc) {\n            return acc[propKey];\n        }\n        return fallback;\n    }, object);\n    return resolvedValue;\n}\n/**\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\n */\nfunction setInPath(object, path, value) {\n    if (isNotNestedPath(path)) {\n        object[cleanupNonNestedPath(path)] = value;\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, set it\n        if (i === keys.length - 1) {\n            acc[keys[i]] = value;\n            return;\n        }\n        // Key does not exist, create a container for it\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            // container can be either an object or an array depending on the next key if it exists\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n        }\n        acc = acc[keys[i]];\n    }\n}\nfunction unset(object, key) {\n    if (Array.isArray(object) && isIndex(key)) {\n        object.splice(Number(key), 1);\n        return;\n    }\n    if (isObject(object)) {\n        delete object[key];\n    }\n}\n/**\n * Removes a nested property from object\n */\nfunction unsetPath(object, path) {\n    if (isNotNestedPath(path)) {\n        delete object[cleanupNonNestedPath(path)];\n        return;\n    }\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n    let acc = object;\n    for (let i = 0; i < keys.length; i++) {\n        // Last key, unset it\n        if (i === keys.length - 1) {\n            unset(acc, keys[i]);\n            break;\n        }\n        // Key does not exist, exit\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n            break;\n        }\n        acc = acc[keys[i]];\n    }\n    const pathValues = keys.map((_, idx) => {\n        return getFromPath(object, keys.slice(0, idx).join('.'));\n    });\n    for (let i = pathValues.length - 1; i >= 0; i--) {\n        if (!isEmptyContainer(pathValues[i])) {\n            continue;\n        }\n        if (i === 0) {\n            unset(object, keys[0]);\n            continue;\n        }\n        unset(pathValues[i - 1], keys[i - 1]);\n    }\n}\n/**\n * A typed version of Object.keys\n */\nfunction keysOf(record) {\n    return Object.keys(record);\n}\n// Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\nfunction injectWithSelf(symbol, def = undefined) {\n    const vm = getCurrentInstance();\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\nfunction warn(message) {\n    warn$1(`[vee-validate]: ${message}`);\n}\n/**\n * Ensures we deal with a singular field value\n */\nfunction normalizeField(field) {\n    if (Array.isArray(field)) {\n        return field[0];\n    }\n    return field;\n}\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n    if (Array.isArray(currentValue)) {\n        const newVal = [...currentValue];\n        // Use isEqual since checked object values can possibly fail the equality check #3883\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n        return newVal;\n    }\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\n * (`limit`)\n */\nfunction throttle(func, limit) {\n    let inThrottle;\n    let lastResult;\n    return function (...args) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const context = this;\n        if (!inThrottle) {\n            inThrottle = true;\n            setTimeout(() => (inThrottle = false), limit);\n            lastResult = func.apply(context, args);\n        }\n        return lastResult;\n    };\n}\nfunction debounceAsync(inner, ms = 0) {\n    let timer = null;\n    let resolves = [];\n    return function (...args) {\n        // Run the function after a certain amount of time\n        if (timer) {\n            window.clearTimeout(timer);\n        }\n        timer = window.setTimeout(() => {\n            // Get the result of the inner function, then apply it to the resolve function of\n            // each promise that has been created since the last time the inner function was run\n            const result = inner(...args);\n            resolves.forEach(r => r(result));\n            resolves = [];\n        }, ms);\n        return new Promise(resolve => resolves.push(resolve));\n    };\n}\nfunction applyModelModifiers(value, modifiers) {\n    if (!isObject(modifiers)) {\n        return value;\n    }\n    if (modifiers.number) {\n        return toNumber(value);\n    }\n    return value;\n}\nfunction withLatest(fn, onDone) {\n    let latestRun;\n    return async function runLatest(...args) {\n        const pending = fn(...args);\n        latestRun = pending;\n        const result = await pending;\n        if (pending !== latestRun) {\n            return result;\n        }\n        latestRun = undefined;\n        onDone(result, args);\n        return result;\n    };\n}\nfunction computedDeep({ get, set }) {\n    const baseRef = ref(klona(get()));\n    watch(get, newValue => {\n        if (isEqual(newValue, baseRef.value)) {\n            return;\n        }\n        baseRef.value = klona(newValue);\n    }, {\n        deep: true,\n    });\n    watch(baseRef, newValue => {\n        if (isEqual(newValue, get())) {\n            return;\n        }\n        set(klona(newValue));\n    }, {\n        deep: true,\n    });\n    return baseRef;\n}\nfunction unravel(value) {\n    if (isCallable(value)) {\n        return value();\n    }\n    return unref(value);\n}\nfunction lazyToRef(value) {\n    return computed(() => unravel(value));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst normalizeChildren = (tag, context, slotProps) => {\n    if (!context.slots.default) {\n        return context.slots.default;\n    }\n    if (typeof tag === 'string' || !tag) {\n        return context.slots.default(slotProps());\n    }\n    return {\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\n    };\n};\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction getBoundValue(el) {\n    if (hasValueBinding(el)) {\n        return el._value;\n    }\n    return undefined;\n}\n/**\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\n */\nfunction hasValueBinding(el) {\n    return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n    if (!isEvent(value)) {\n        return value;\n    }\n    const input = value.target;\n    // Vue sets the current bound value on `_value` prop\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n        return getBoundValue(input);\n    }\n    if (input.type === 'file' && input.files) {\n        const files = Array.from(input.files);\n        return input.multiple ? files : files[0];\n    }\n    if (isNativeMultiSelect(input)) {\n        return Array.from(input.options)\n            .filter(opt => opt.selected && !opt.disabled)\n            .map(getBoundValue);\n    }\n    // makes sure we get the actual `option` bound value\n    // #3440\n    if (isNativeSelect(input)) {\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\n    }\n    return input.value;\n}\n\n/**\n * Normalizes the given rules expression.\n */\nfunction normalizeRules(rules) {\n    const acc = {};\n    Object.defineProperty(acc, '_$$isNormalized', {\n        value: true,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n    if (!rules) {\n        return acc;\n    }\n    // Object is already normalized, skip.\n    if (isObject(rules) && rules._$$isNormalized) {\n        return rules;\n    }\n    if (isObject(rules)) {\n        return Object.keys(rules).reduce((prev, curr) => {\n            const params = normalizeParams(rules[curr]);\n            if (rules[curr] !== false) {\n                prev[curr] = buildParams(params);\n            }\n            return prev;\n        }, acc);\n    }\n    /* istanbul ignore if */\n    if (typeof rules !== 'string') {\n        return acc;\n    }\n    return rules.split('|').reduce((prev, rule) => {\n        const parsedRule = parseRule(rule);\n        if (!parsedRule.name) {\n            return prev;\n        }\n        prev[parsedRule.name] = buildParams(parsedRule.params);\n        return prev;\n    }, acc);\n}\n/**\n * Normalizes a rule param.\n */\nfunction normalizeParams(params) {\n    if (params === true) {\n        return [];\n    }\n    if (Array.isArray(params)) {\n        return params;\n    }\n    if (isObject(params)) {\n        return params;\n    }\n    return [params];\n}\nfunction buildParams(provided) {\n    const mapValueToLocator = (value) => {\n        // A target param using interpolation\n        if (typeof value === 'string' && value[0] === '@') {\n            return createLocator(value.slice(1));\n        }\n        return value;\n    };\n    if (Array.isArray(provided)) {\n        return provided.map(mapValueToLocator);\n    }\n    // #3073\n    if (provided instanceof RegExp) {\n        return [provided];\n    }\n    return Object.keys(provided).reduce((prev, key) => {\n        prev[key] = mapValueToLocator(provided[key]);\n        return prev;\n    }, {});\n}\n/**\n * Parses a rule string expression.\n */\nconst parseRule = (rule) => {\n    let params = [];\n    const name = rule.split(':')[0];\n    if (rule.includes(':')) {\n        params = rule.split(':').slice(1).join(':').split(',');\n    }\n    return { name, params };\n};\nfunction createLocator(value) {\n    const locator = (crossTable) => {\n        const val = getFromPath(crossTable, value) || crossTable[value];\n        return val;\n    };\n    locator.__locatorRef = value;\n    return locator;\n}\nfunction extractLocators(params) {\n    if (Array.isArray(params)) {\n        return params.filter(isLocator);\n    }\n    return keysOf(params)\n        .filter(key => isLocator(params[key]))\n        .map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n    generateMessage: ({ field }) => `${field} is not valid.`,\n    bails: true,\n    validateOnBlur: true,\n    validateOnChange: true,\n    validateOnInput: false,\n    validateOnModelUpdate: true,\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\nconst getConfig = () => currentConfig;\nconst setConfig = (newConf) => {\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\nconst configure = setConfig;\n\n/**\n * Validates a value against the rules.\n */\nasync function validate(value, rules, options = {}) {\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n    const field = {\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n        rules,\n        label: options === null || options === void 0 ? void 0 : options.label,\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\n    };\n    const result = await _validate(field, value);\n    const errors = result.errors;\n    return {\n        errors,\n        valid: !errors.length,\n    };\n}\n/**\n * Starts the validation process.\n */\nasync function _validate(field, value) {\n    if (isTypedSchema(field.rules) || isYupValidator(field.rules)) {\n        return validateFieldWithTypedSchema(value, field.rules);\n    }\n    // if a generic function or chain of generic functions\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\n        const ctx = {\n            field: field.label || field.name,\n            name: field.name,\n            label: field.label,\n            form: field.formData,\n            value,\n        };\n        // Normalize the pipeline\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n        const length = pipeline.length;\n        const errors = [];\n        for (let i = 0; i < length; i++) {\n            const rule = pipeline[i];\n            const result = await rule(value, ctx);\n            const isValid = typeof result !== 'string' && result;\n            if (isValid) {\n                continue;\n            }\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n            errors.push(message);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n        return {\n            errors,\n        };\n    }\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\n    const errors = [];\n    const rulesKeys = Object.keys(normalizedContext.rules);\n    const length = rulesKeys.length;\n    for (let i = 0; i < length; i++) {\n        const rule = rulesKeys[i];\n        const result = await _test(normalizedContext, value, {\n            name: rule,\n            params: normalizedContext.rules[rule],\n        });\n        if (result.error) {\n            errors.push(result.error);\n            if (field.bails) {\n                return {\n                    errors,\n                };\n            }\n        }\n    }\n    return {\n        errors,\n    };\n}\nfunction isYupError(err) {\n    return !!err && err.name === 'ValidationError';\n}\nfunction yupToTypedSchema(yupSchema) {\n    const schema = {\n        __type: 'VVTypedSchema',\n        async parse(values) {\n            var _a;\n            try {\n                const output = await yupSchema.validate(values, { abortEarly: false });\n                return {\n                    output,\n                    errors: [],\n                };\n            }\n            catch (err) {\n                // Yup errors have a name prop one them.\n                // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n                if (!isYupError(err)) {\n                    throw err;\n                }\n                if (!((_a = err.inner) === null || _a === void 0 ? void 0 : _a.length) && err.errors.length) {\n                    return { errors: [{ path: err.path, errors: err.errors }] };\n                }\n                const errors = err.inner.reduce((acc, curr) => {\n                    const path = curr.path || '';\n                    if (!acc[path]) {\n                        acc[path] = { errors: [], path };\n                    }\n                    acc[path].errors.push(...curr.errors);\n                    return acc;\n                }, {});\n                return { errors: Object.values(errors) };\n            }\n        },\n    };\n    return schema;\n}\n/**\n * Handles yup validation\n */\nasync function validateFieldWithTypedSchema(value, schema) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const result = await typedSchema.parse(value);\n    const messages = [];\n    for (const error of result.errors) {\n        if (error.errors.length) {\n            messages.push(...error.errors);\n        }\n    }\n    return {\n        errors: messages,\n    };\n}\n/**\n * Tests a single input value against a rule.\n */\nasync function _test(field, value, rule) {\n    const validator = resolveRule(rule.name);\n    if (!validator) {\n        throw new Error(`No such validator '${rule.name}' exists.`);\n    }\n    const params = fillTargetValues(rule.params, field.formData);\n    const ctx = {\n        field: field.label || field.name,\n        name: field.name,\n        label: field.label,\n        value,\n        form: field.formData,\n        rule: Object.assign(Object.assign({}, rule), { params }),\n    };\n    const result = await validator(value, params, ctx);\n    if (typeof result === 'string') {\n        return {\n            error: result,\n        };\n    }\n    return {\n        error: result ? undefined : _generateFieldError(ctx),\n    };\n}\n/**\n * Generates error messages.\n */\nfunction _generateFieldError(fieldCtx) {\n    const message = getConfig().generateMessage;\n    if (!message) {\n        return 'Field is invalid';\n    }\n    return message(fieldCtx);\n}\nfunction fillTargetValues(params, crossTable) {\n    const normalize = (value) => {\n        if (isLocator(value)) {\n            return value(crossTable);\n        }\n        return value;\n    };\n    if (Array.isArray(params)) {\n        return params.map(normalize);\n    }\n    return Object.keys(params).reduce((acc, param) => {\n        acc[param] = normalize(params[param]);\n        return acc;\n    }, {});\n}\nasync function validateTypedSchema(schema, values) {\n    const typedSchema = isTypedSchema(schema) ? schema : yupToTypedSchema(schema);\n    const validationResult = await typedSchema.parse(values);\n    const results = {};\n    const errors = {};\n    for (const error of validationResult.errors) {\n        const messages = error.errors;\n        // Fixes issue with path mapping with Yup 1.0 including quotes around array indices\n        const path = (error.path || '').replace(/\\[\"(\\d+)\"\\]/g, (_, m) => {\n            return `[${m}]`;\n        });\n        results[path] = { valid: !messages.length, errors: messages };\n        if (messages.length) {\n            errors[path] = messages[0];\n        }\n    }\n    return {\n        valid: !validationResult.errors.length,\n        results,\n        errors,\n        values: validationResult.value,\n    };\n}\nasync function validateObjectSchema(schema, values, opts) {\n    const paths = keysOf(schema);\n    const validations = paths.map(async (path) => {\n        var _a, _b, _c;\n        const strings = (_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path];\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\n            name: (strings === null || strings === void 0 ? void 0 : strings.name) || path,\n            label: strings === null || strings === void 0 ? void 0 : strings.label,\n            values: values,\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\n        });\n        return Object.assign(Object.assign({}, fieldResult), { path });\n    });\n    let isAllValid = true;\n    const validationResults = await Promise.all(validations);\n    const results = {};\n    const errors = {};\n    for (const result of validationResults) {\n        results[result.path] = {\n            valid: result.valid,\n            errors: result.errors,\n        };\n        if (!result.valid) {\n            isAllValid = false;\n            errors[result.path] = result.errors[0];\n        }\n    }\n    return {\n        valid: isAllValid,\n        results,\n        errors,\n    };\n}\n\nlet ID_COUNTER = 0;\nfunction useFieldState(path, init) {\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, init.form);\n    const meta = _useFieldMeta(value, initialValue, errors);\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n    function setState(state) {\n        var _a;\n        if ('value' in state) {\n            value.value = state.value;\n        }\n        if ('errors' in state) {\n            setErrors(state.errors);\n        }\n        if ('touched' in state) {\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n        }\n        if ('initialValue' in state) {\n            setInitialValue(state.initialValue);\n        }\n    }\n    return {\n        id,\n        path,\n        value,\n        initialValue,\n        meta,\n        errors,\n        errorMessage,\n        setState,\n    };\n}\n/**\n * Creates the field value and resolves the initial value\n */\nfunction _useFieldValue(path, modelValue, form) {\n    const modelRef = ref(unref(modelValue));\n    function resolveInitialValue() {\n        if (!form) {\n            return unref(modelRef);\n        }\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n    }\n    function setInitialValue(value) {\n        if (!form) {\n            modelRef.value = value;\n            return;\n        }\n        form.stageInitialValue(unref(path), value, true);\n    }\n    const initialValue = computed(resolveInitialValue);\n    // if no form is associated, use a regular ref.\n    if (!form) {\n        const value = ref(resolveInitialValue());\n        return {\n            value,\n            initialValue,\n            setInitialValue,\n        };\n    }\n    // to set the initial value, first check if there is a current value, if there is then use it.\n    // otherwise use the configured initial value if it exists.\n    // prioritize model value over form values\n    // #3429\n    const currentValue = resolveModelValue(modelValue, form, initialValue, path);\n    form.stageInitialValue(unref(path), currentValue, true);\n    // otherwise use a computed setter that triggers the `setFieldValue`\n    const value = computed({\n        get() {\n            return getFromPath(form.values, unref(path));\n        },\n        set(newVal) {\n            form.setFieldValue(unref(path), newVal);\n        },\n    });\n    return {\n        value,\n        initialValue,\n        setInitialValue,\n    };\n}\n/*\n  to set the initial value, first check if there is a current value, if there is then use it.\n  otherwise use the configured initial value if it exists.\n  prioritize model value over form values\n  #3429\n*/\nfunction resolveModelValue(modelValue, form, initialValue, path) {\n    if (isRef(modelValue)) {\n        return unref(modelValue);\n    }\n    if (modelValue !== undefined) {\n        return modelValue;\n    }\n    return getFromPath(form.values, unref(path), unref(initialValue));\n}\n/**\n * Creates meta flags state and some associated effects with them\n */\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n    const meta = reactive({\n        touched: false,\n        pending: false,\n        valid: true,\n        validated: !!unref(errors).length,\n        initialValue: computed(() => unref(initialValue)),\n        dirty: computed(() => {\n            return !isEqual(unref(currentValue), unref(initialValue));\n        }),\n    });\n    watch(errors, value => {\n        meta.valid = !value.length;\n    }, {\n        immediate: true,\n        flush: 'sync',\n    });\n    return meta;\n}\n/**\n * Creates the error message state for the field state\n */\nfunction _useFieldErrors(path, form) {\n    function normalizeErrors(messages) {\n        if (!messages) {\n            return [];\n        }\n        return Array.isArray(messages) ? messages : [messages];\n    }\n    if (!form) {\n        const errors = ref([]);\n        return {\n            errors,\n            errorMessage: computed(() => errors.value[0]),\n            setErrors: (messages) => {\n                errors.value = normalizeErrors(messages);\n            },\n        };\n    }\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\n    return {\n        errors,\n        errorMessage: computed(() => errors.value[0]),\n        setErrors: (messages) => {\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n        },\n    };\n}\n\nfunction installDevtoolsPlugin(app) {\n    if ((process.env.NODE_ENV !== 'production')) {\n        setupDevtoolsPlugin({\n            id: 'vee-validate-devtools-plugin',\n            label: 'VeeValidate Plugin',\n            packageName: 'vee-validate',\n            homepage: 'https://vee-validate.logaretm.com/v4',\n            app,\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\n        }, setupApiHooks);\n    }\n}\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n    setTimeout(async () => {\n        await nextTick();\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n    }, 100);\n}, 100);\nfunction registerFormWithDevTools(form) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FORMS[form.formId];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nfunction registerSingleFieldWithDevtools(field) {\n    const vm = getCurrentInstance();\n    if (!API) {\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n        if (!app) {\n            return;\n        }\n        installDevtoolsPlugin(app);\n    }\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\n    onUnmounted(() => {\n        delete DEVTOOLS_FIELDS[field.id];\n        refreshInspector();\n    });\n    refreshInspector();\n}\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n    error: 0xbd4b4b,\n    success: 0x06d77b,\n    unknown: 0x54436b,\n    white: 0xffffff,\n    black: 0x000000,\n    blue: 0x035397,\n    purple: 0xb980f0,\n    orange: 0xf5a962,\n    gray: 0xbbbfca,\n};\nlet SELECTED_NODE = null;\nfunction setupApiHooks(api) {\n    API = api;\n    api.addInspector({\n        id: INSPECTOR_ID,\n        icon: 'rule',\n        label: 'vee-validate',\n        noSelectionText: 'Select a vee-validate node to inspect',\n        actions: [\n            {\n                icon: 'done_outline',\n                tooltip: 'Validate selected item',\n                action: async () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    await SELECTED_NODE.validate();\n                },\n            },\n            {\n                icon: 'delete_sweep',\n                tooltip: 'Clear validation state of the selected item',\n                action: () => {\n                    if (!SELECTED_NODE) {\n                        console.error('There is not a valid selected vee-validate node or component');\n                        return;\n                    }\n                    if ('id' in SELECTED_NODE) {\n                        SELECTED_NODE.resetField();\n                        return;\n                    }\n                    SELECTED_NODE.resetForm();\n                },\n            },\n        ],\n    });\n    api.on.getInspectorTree(payload => {\n        if (payload.inspectorId !== INSPECTOR_ID) {\n            return;\n        }\n        const forms = Object.values(DEVTOOLS_FORMS);\n        const fields = Object.values(DEVTOOLS_FIELDS);\n        payload.rootNodes = [\n            ...forms.map(mapFormForDevtoolsInspector),\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\n        ];\n    });\n    api.on.getInspectorState((payload, ctx) => {\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n            return;\n        }\n        const { form, field, type } = decodeNodeId(payload.nodeId);\n        if (form && type === 'form') {\n            payload.state = buildFormState(form);\n            SELECTED_NODE = form;\n            return;\n        }\n        if (field && type === 'field') {\n            payload.state = buildFieldState(field);\n            SELECTED_NODE = field;\n            return;\n        }\n        SELECTED_NODE = null;\n    });\n}\nfunction mapFormForDevtoolsInspector(form) {\n    const { textColor, bgColor } = getTagTheme(form);\n    const formTreeNodes = {};\n    Object.values(form.fieldsByPath.value).forEach(field => {\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\n        if (!fieldInstance) {\n            return;\n        }\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n    });\n    function buildFormTree(tree, path = []) {\n        const key = [...path].pop();\n        if ('id' in tree) {\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\n        }\n        if (isObject(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: key || '',\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\n            };\n        }\n        if (Array.isArray(tree)) {\n            return {\n                id: `${path.join('.')}`,\n                label: `${key}[]`,\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\n            };\n        }\n        return { id: '', label: '', children: [] };\n    }\n    const { children } = buildFormTree(formTreeNodes);\n    return {\n        id: encodeNodeId(form),\n        label: 'Form',\n        children,\n        tags: [\n            {\n                label: 'Form',\n                textColor,\n                backgroundColor: bgColor,\n            },\n            {\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n                textColor: COLORS.white,\n                backgroundColor: COLORS.unknown,\n            },\n        ],\n    };\n}\nfunction mapFieldForDevtoolsInspector(field, form) {\n    const fieldInstance = normalizeField(field);\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\n    const isGroup = Array.isArray(field) && field.length > 1;\n    return {\n        id: encodeNodeId(form, fieldInstance, !isGroup),\n        label: unref(fieldInstance.name),\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n        tags: [\n            isGroup\n                ? undefined\n                : {\n                    label: 'Field',\n                    textColor,\n                    backgroundColor: bgColor,\n                },\n            !form\n                ? {\n                    label: 'Standalone',\n                    textColor: COLORS.black,\n                    backgroundColor: COLORS.gray,\n                }\n                : undefined,\n            !isGroup && fieldInstance.type === 'checkbox'\n                ? {\n                    label: 'Checkbox',\n                    textColor: COLORS.white,\n                    backgroundColor: COLORS.blue,\n                }\n                : undefined,\n            !isGroup && fieldInstance.type === 'radio'\n                ? {\n                    label: 'Radio',\n                    textColor: COLORS.white,\n                    backgroundColor: COLORS.purple,\n                }\n                : undefined,\n            isGroup\n                ? {\n                    label: 'Group',\n                    textColor: COLORS.black,\n                    backgroundColor: COLORS.orange,\n                }\n                : undefined,\n        ].filter(Boolean),\n    };\n}\nfunction encodeNodeId(form, field, encodeIndex = true) {\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n    let idx;\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\n        idx = fieldGroup.indexOf(field);\n    }\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\n    return btoa(JSON.stringify(idObject));\n}\nfunction decodeNodeId(nodeId) {\n    try {\n        const idObject = JSON.parse(atob(nodeId));\n        const form = DEVTOOLS_FORMS[idObject.f];\n        if (!form && idObject.ff) {\n            const field = DEVTOOLS_FIELDS[idObject.ff];\n            if (!field) {\n                return {};\n            }\n            return {\n                type: idObject.type,\n                field,\n            };\n        }\n        if (!form) {\n            return {};\n        }\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\n        return {\n            type: idObject.type,\n            form,\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\n        };\n    }\n    catch (err) {\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n    }\n    return {};\n}\nfunction buildFieldState(field) {\n    const { errors, meta, value } = field;\n    return {\n        'Field state': [\n            { key: 'errors', value: errors.value },\n            {\n                key: 'initialValue',\n                value: meta.initialValue,\n            },\n            {\n                key: 'currentValue',\n                value: value.value,\n            },\n            {\n                key: 'touched',\n                value: meta.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.valid,\n            },\n        ],\n    };\n}\nfunction buildFormState(form) {\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\n    return {\n        'Form state': [\n            {\n                key: 'submitCount',\n                value: submitCount.value,\n            },\n            {\n                key: 'isSubmitting',\n                value: isSubmitting.value,\n            },\n            {\n                key: 'touched',\n                value: meta.value.touched,\n            },\n            {\n                key: 'dirty',\n                value: meta.value.dirty,\n            },\n            {\n                key: 'valid',\n                value: meta.value.valid,\n            },\n            {\n                key: 'initialValues',\n                value: meta.value.initialValues,\n            },\n            {\n                key: 'currentValues',\n                value: values,\n            },\n            {\n                key: 'errors',\n                value: keysOf(errorBag.value).reduce((acc, key) => {\n                    var _a;\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n                    if (message) {\n                        acc[key] = message;\n                    }\n                    return acc;\n                }, {}),\n            },\n        ],\n    };\n}\n/**\n * Resolves the tag color based on the form state\n */\nfunction getTagTheme(fieldOrForm) {\n    // const fallbackColors = {\n    //   bgColor: COLORS.unknown,\n    //   textColor: COLORS.white,\n    // };\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n    return {\n        bgColor: isValid ? COLORS.success : COLORS.error,\n        textColor: isValid ? COLORS.black : COLORS.white,\n    };\n}\n\n/**\n * Creates a field composite.\n */\nfunction useField(path, rules, opts) {\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n        return useCheckboxField(path, rules, opts);\n    }\n    return _useField(path, rules, opts);\n}\nfunction _useField(path, rules, opts) {\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, modelPropName, syncVModel, form: controlForm, } = normalizeOptions(opts);\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n    const form = controlForm || injectedForm;\n    const name = lazyToRef(path);\n    // a flag indicating if the field is about to be removed/unmounted.\n    let markedForRemoval = false;\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\n        modelValue,\n        form,\n    });\n    if (syncVModel) {\n        useVModel({ value, prop: modelPropName, handleChange });\n    }\n    /**\n     * Handles common onBlur meta update\n     */\n    const handleBlur = () => {\n        meta.touched = true;\n    };\n    const normalizedRules = computed(() => {\n        let rulesValue = unref(rules);\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n        if (schema && !isYupValidator(schema) && !isTypedSchema(schema)) {\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n        }\n        if (isYupValidator(rulesValue) ||\n            isTypedSchema(rulesValue) ||\n            isCallable(rulesValue) ||\n            Array.isArray(rulesValue)) {\n            return rulesValue;\n        }\n        return normalizeRules(rulesValue);\n    });\n    async function validateCurrentValue(mode) {\n        var _a, _b;\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\n        }\n        return validate(value.value, normalizedRules.value, {\n            name: unref(name),\n            label: unref(label),\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n            bails,\n        });\n    }\n    const validateWithStateMutation = withLatest(async () => {\n        meta.pending = true;\n        meta.validated = true;\n        return validateCurrentValue('validated-only');\n    }, result => {\n        if (markedForRemoval) {\n            result.valid = true;\n            result.errors = [];\n        }\n        setState({ errors: result.errors });\n        meta.pending = false;\n        return result;\n    });\n    const validateValidStateOnly = withLatest(async () => {\n        return validateCurrentValue('silent');\n    }, result => {\n        if (markedForRemoval) {\n            result.valid = true;\n        }\n        meta.valid = result.valid;\n        return result;\n    });\n    function validate$1(opts) {\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n            return validateValidStateOnly();\n        }\n        return validateWithStateMutation();\n    }\n    // Common input/change event handler\n    function handleChange(e, shouldValidate = true) {\n        const newValue = normalizeEventValue(e);\n        value.value = newValue;\n        if (!validateOnValueUpdate && shouldValidate) {\n            validateWithStateMutation();\n        }\n    }\n    // Runs the initial validation\n    onMounted(() => {\n        if (validateOnMount) {\n            return validateWithStateMutation();\n        }\n        // validate self initially if no form was handling this\n        // forms should have their own initial silent validation run to make things more efficient\n        if (!form || !form.validateSchema) {\n            validateValidStateOnly();\n        }\n    });\n    function setTouched(isTouched) {\n        meta.touched = isTouched;\n    }\n    let unwatchValue;\n    let lastWatchedValue = klona(value.value);\n    function watchValue() {\n        unwatchValue = watch(value, (val, oldVal) => {\n            if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\n                return;\n            }\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n            validateFn();\n            lastWatchedValue = klona(val);\n        }, {\n            deep: true,\n        });\n    }\n    watchValue();\n    function resetField(state) {\n        var _a;\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\n        setState({\n            value: klona(newValue),\n            initialValue: klona(newValue),\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\n        });\n        meta.pending = false;\n        meta.validated = false;\n        validateValidStateOnly();\n        // need to watch at next tick to avoid triggering the value watcher\n        nextTick(() => {\n            watchValue();\n        });\n    }\n    function setValue(newValue) {\n        value.value = newValue;\n    }\n    function setErrors(errors) {\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\n    }\n    const field = {\n        id,\n        name,\n        label,\n        value,\n        meta,\n        errors,\n        errorMessage,\n        type,\n        checkedValue,\n        uncheckedValue,\n        bails,\n        keepValueOnUnmount,\n        resetField,\n        handleReset: () => resetField(),\n        validate: validate$1,\n        handleChange,\n        handleBlur,\n        setState,\n        setTouched,\n        setErrors,\n        setValue,\n    };\n    provide(FieldContextKey, field);\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\n        watch(rules, (value, oldValue) => {\n            if (isEqual(value, oldValue)) {\n                return;\n            }\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }, {\n            deep: true,\n        });\n    }\n    if ((process.env.NODE_ENV !== 'production')) {\n        field._vm = getCurrentInstance();\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\n            deep: true,\n        });\n        if (!form) {\n            registerSingleFieldWithDevtools(field);\n        }\n    }\n    // if no associated form return the field API immediately\n    if (!form) {\n        return field;\n    }\n    // associate the field with the given form\n    form.register(field);\n    onBeforeUnmount(() => {\n        markedForRemoval = true;\n        form.unregister(field);\n    });\n    // extract cross-field dependencies in a computed prop\n    const dependencies = computed(() => {\n        const rulesVal = normalizedRules.value;\n        // is falsy, a function schema or a yup schema\n        if (!rulesVal ||\n            isCallable(rulesVal) ||\n            isYupValidator(rulesVal) ||\n            isTypedSchema(rulesVal) ||\n            Array.isArray(rulesVal)) {\n            return {};\n        }\n        return Object.keys(rulesVal).reduce((acc, rule) => {\n            const deps = extractLocators(rulesVal[rule])\n                .map((dep) => dep.__locatorRef)\n                .reduce((depAcc, depName) => {\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\n                if (depValue !== undefined) {\n                    depAcc[depName] = depValue;\n                }\n                return depAcc;\n            }, {});\n            Object.assign(acc, deps);\n            return acc;\n        }, {});\n    });\n    // Adds a watcher that runs the validation whenever field dependencies change\n    watch(dependencies, (deps, oldDeps) => {\n        // Skip if no dependencies or if the field wasn't manipulated\n        if (!Object.keys(deps).length) {\n            return;\n        }\n        const shouldValidate = !isEqual(deps, oldDeps);\n        if (shouldValidate) {\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n        }\n    });\n    return field;\n}\n/**\n * Normalizes partial field options to include the full options\n */\nfunction normalizeOptions(opts) {\n    var _a;\n    const defaults = () => ({\n        initialValue: undefined,\n        validateOnMount: false,\n        bails: true,\n        label: undefined,\n        validateOnValueUpdate: true,\n        keepValueOnUnmount: undefined,\n        modelPropName: 'modelValue',\n        syncVModel: true,\n        controlled: true,\n    });\n    const isVModelSynced = (_a = opts === null || opts === void 0 ? void 0 : opts.syncVModel) !== null && _a !== void 0 ? _a : true;\n    const initialValue = isVModelSynced && !('initialValue' in (opts || {}))\n        ? getCurrentModelValue(getCurrentInstance(), (opts === null || opts === void 0 ? void 0 : opts.modelPropName) || 'modelValue')\n        : opts === null || opts === void 0 ? void 0 : opts.initialValue;\n    if (!opts) {\n        return Object.assign(Object.assign({}, defaults()), { initialValue });\n    }\n    // TODO: Deprecate this in next major release\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { initialValue, controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue });\n}\n/**\n * Extracts the validation rules from a schema\n */\nfunction extractRuleFromSchema(schema, fieldName) {\n    // no schema at all\n    if (!schema) {\n        return undefined;\n    }\n    // there is a key on the schema object for this field\n    return schema[fieldName];\n}\nfunction useCheckboxField(name, rules, opts) {\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n    function patchCheckboxApi(field) {\n        const handleChange = field.handleChange;\n        const checked = computed(() => {\n            const currentValue = unref(field.value);\n            const checkedVal = unref(checkedValue);\n            return Array.isArray(currentValue)\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\n                : isEqual(checkedVal, currentValue);\n        });\n        function handleCheckboxChange(e, shouldValidate = true) {\n            var _a;\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n                if (shouldValidate) {\n                    field.validate();\n                }\n                return;\n            }\n            let newValue = normalizeEventValue(e);\n            // Single checkbox field without a form to toggle it's value\n            if (!form) {\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n            }\n            handleChange(newValue, shouldValidate);\n        }\n        return Object.assign(Object.assign({}, field), { checked,\n            checkedValue,\n            uncheckedValue, handleChange: handleCheckboxChange });\n    }\n    return patchCheckboxApi(_useField(name, rules, opts));\n}\nfunction useVModel({ prop, value, handleChange }) {\n    const vm = getCurrentInstance();\n    /* istanbul ignore next */\n    if (!vm) {\n        if ((process.env.NODE_ENV !== 'production')) {\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\n        }\n        return;\n    }\n    const propName = prop || 'modelValue';\n    const emitName = `update:${propName}`;\n    // Component doesn't have a model prop setup (must be defined on the props)\n    if (!(propName in vm.props)) {\n        return;\n    }\n    watch(value, newValue => {\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n            return;\n        }\n        vm.emit(emitName, newValue);\n    });\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\n        if (propValue === IS_ABSENT && value.value === undefined) {\n            return;\n        }\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\n        if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n            return;\n        }\n        handleChange(newValue);\n    });\n}\nfunction getCurrentModelValue(vm, propName) {\n    if (!vm) {\n        return undefined;\n    }\n    return vm.props[propName];\n}\n\nconst FieldImpl = defineComponent({\n    name: 'Field',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: [String, Object],\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        rules: {\n            type: [Object, String, Function],\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        validateOnBlur: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnChange: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnInput: {\n            type: Boolean,\n            default: undefined,\n        },\n        validateOnModelUpdate: {\n            type: Boolean,\n            default: undefined,\n        },\n        bails: {\n            type: Boolean,\n            default: () => getConfig().bails,\n        },\n        label: {\n            type: String,\n            default: undefined,\n        },\n        uncheckedValue: {\n            type: null,\n            default: undefined,\n        },\n        modelValue: {\n            type: null,\n            default: IS_ABSENT,\n        },\n        modelModifiers: {\n            type: null,\n            default: () => ({}),\n        },\n        'onUpdate:modelValue': {\n            type: null,\n            default: undefined,\n        },\n        standalone: {\n            type: Boolean,\n            default: false,\n        },\n        keepValue: {\n            type: Boolean,\n            default: undefined,\n        },\n    },\n    setup(props, ctx) {\n        const rules = toRef(props, 'rules');\n        const name = toRef(props, 'name');\n        const label = toRef(props, 'label');\n        const uncheckedValue = toRef(props, 'uncheckedValue');\n        const keepValue = toRef(props, 'keepValue');\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\n            validateOnMount: props.validateOnMount,\n            bails: props.bails,\n            standalone: props.standalone,\n            type: ctx.attrs.type,\n            initialValue: resolveInitialValue(props, ctx),\n            // Only for checkboxes and radio buttons\n            checkedValue: ctx.attrs.value,\n            uncheckedValue,\n            label,\n            validateOnValueUpdate: false,\n            keepValueOnUnmount: keepValue,\n        });\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n            handleChange(e, shouldValidate);\n            ctx.emit('update:modelValue', value.value);\n        };\n        const handleInput = (e) => {\n            if (!hasCheckedAttr(ctx.attrs.type)) {\n                value.value = normalizeEventValue(e);\n            }\n        };\n        const onInputHandler = function handleInputWithModel(e) {\n            handleInput(e);\n            ctx.emit('update:modelValue', value.value);\n        };\n        const fieldProps = computed(() => {\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n            const attrs = {\n                name: props.name,\n                onBlur: baseOnBlur,\n                onInput: baseOnInput,\n                onChange: baseOnChange,\n            };\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\n                attrs.checked = checked.value;\n            }\n            const tag = resolveTag(props, ctx);\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\n                attrs.value = value.value;\n            }\n            return attrs;\n        });\n        function slotProps() {\n            return {\n                field: fieldProps.value,\n                value: value.value,\n                meta,\n                errors: errors.value,\n                errorMessage: errorMessage.value,\n                validate: validateField,\n                resetField,\n                handleChange: onChangeHandler,\n                handleInput: onInputHandler,\n                handleReset,\n                handleBlur,\n                setTouched,\n                setErrors,\n            };\n        }\n        ctx.expose({\n            setErrors,\n            setTouched,\n            reset: resetField,\n            validate: validateField,\n            handleChange,\n        });\n        return () => {\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (tag) {\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n            }\n            return children;\n        };\n    },\n});\nfunction resolveTag(props, ctx) {\n    let tag = props.as || '';\n    if (!props.as && !ctx.slots.default) {\n        tag = 'input';\n    }\n    return tag;\n}\nfunction resolveValidationTriggers(props) {\n    var _a, _b, _c, _d;\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\n    return {\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\n    };\n}\nfunction resolveInitialValue(props, ctx) {\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n    if (!hasCheckedAttr(ctx.attrs.type)) {\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n    }\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\nfunction resolveInitialValues(opts) {\n    const providedValues = unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {};\n    const schema = unref(opts === null || opts === void 0 ? void 0 : opts.validationSchema);\n    if (schema && isTypedSchema(schema) && isCallable(schema.cast)) {\n        return klona(schema.cast(providedValues) || {});\n    }\n    return klona(providedValues);\n}\nfunction useForm(opts) {\n    var _a;\n    const formId = FORM_COUNTER++;\n    const controlledModelPaths = new Set();\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n    let RESET_LOCK = false;\n    // A lookup containing fields or field groups\n    const fieldsByPath = ref({});\n    // If the form is currently submitting\n    const isSubmitting = ref(false);\n    // The number of times the user tried to submit the form\n    const submitCount = ref(0);\n    // field arrays managed by this form\n    const fieldArrays = [];\n    // a private ref for all form values\n    const formValues = reactive(resolveInitialValues(opts));\n    // the source of errors for the form fields\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\n    // Gets the first error of each field\n    const errors = computed(() => {\n        return keysOf(errorBag.value).reduce((acc, key) => {\n            const bag = errorBag.value[key];\n            if (bag && bag.length) {\n                acc[key] = bag[0];\n            }\n            return acc;\n        }, {});\n    });\n    function getFirstFieldAtPath(path) {\n        const fieldOrGroup = fieldsByPath.value[path];\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n    }\n    function fieldExists(path) {\n        return !!fieldsByPath.value[path];\n    }\n    /**\n     * Holds a computed reference to all fields names and labels\n     */\n    const fieldNames = computed(() => {\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\n            const field = getFirstFieldAtPath(path);\n            if (field) {\n                names[path] = { name: unref(field.name) || '', label: unref(field.label) || '' };\n            }\n            return names;\n        }, {});\n    });\n    const fieldBailsMap = computed(() => {\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\n            var _a;\n            const field = getFirstFieldAtPath(path);\n            if (field) {\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n            }\n            return map;\n        }, {});\n    });\n    // mutable non-reactive reference to initial errors\n    // we need this to process initial errors then unset them\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\n    // initial form values\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts);\n    // form meta aggregations\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n    const controlledValues = computed(() => {\n        return [...controlledModelPaths, ...keysOf(fieldsByPath.value)].reduce((acc, path) => {\n            const value = getFromPath(formValues, path);\n            setInPath(acc, path, value);\n            return acc;\n        }, {});\n    });\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n    /**\n     * Batches validation runs in 5ms batches\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\n     */\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\n    const validateSchema = withLatest(async (mode) => {\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n    }, (formResult, [mode]) => {\n        // fields by id lookup\n        const fieldsById = formCtx.fieldsByPath.value || {};\n        // errors fields names, we need it to also check if custom errors are updated\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\n        // collect all the keys from the schema and all fields\n        // this ensures we have a complete keymap of all the fields\n        const paths = [\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\n        ];\n        // aggregates the paths into a single result object while applying the results on the fields\n        return paths.reduce((validation, path) => {\n            const field = fieldsById[path];\n            const messages = (formResult.results[path] || { errors: [] }).errors;\n            const fieldResult = {\n                errors: messages,\n                valid: !messages.length,\n            };\n            validation.results[path] = fieldResult;\n            if (!fieldResult.valid) {\n                validation.errors[path] = fieldResult.errors[0];\n            }\n            // field not rendered\n            if (!field) {\n                setFieldError(path, messages);\n                return validation;\n            }\n            // always update the valid flag regardless of the mode\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\n            if (mode === 'silent') {\n                return validation;\n            }\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n            if (mode === 'validated-only' && !wasValidated) {\n                return validation;\n            }\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\n            return validation;\n        }, { valid: formResult.valid, results: {}, errors: {} });\n    });\n    function makeSubmissionFactory(onlyControlled) {\n        return function submitHandlerFactory(fn, onValidationError) {\n            return function submissionHandler(e) {\n                if (e instanceof Event) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                // Touch all fields\n                setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n                    acc[field] = true;\n                    return acc;\n                }, {}));\n                isSubmitting.value = true;\n                submitCount.value++;\n                return validate()\n                    .then(result => {\n                    const values = klona(formValues);\n                    if (result.valid && typeof fn === 'function') {\n                        const controlled = klona(controlledValues.value);\n                        let submittedValues = onlyControlled ? controlled : values;\n                        if (result.values) {\n                            submittedValues = result.values;\n                        }\n                        return fn(submittedValues, {\n                            evt: e,\n                            controlledValues: controlled,\n                            setErrors,\n                            setFieldError,\n                            setTouched,\n                            setFieldTouched,\n                            setValues,\n                            setFieldValue,\n                            resetForm,\n                            resetField,\n                        });\n                    }\n                    if (!result.valid && typeof onValidationError === 'function') {\n                        onValidationError({\n                            values,\n                            evt: e,\n                            errors: result.errors,\n                            results: result.results,\n                        });\n                    }\n                })\n                    .then(returnVal => {\n                    isSubmitting.value = false;\n                    return returnVal;\n                }, err => {\n                    isSubmitting.value = false;\n                    // re-throw the err so it doesn't go silent\n                    throw err;\n                });\n            };\n        };\n    }\n    const handleSubmitImpl = makeSubmissionFactory(false);\n    const handleSubmit = handleSubmitImpl;\n    handleSubmit.withControlled = makeSubmissionFactory(true);\n    const formCtx = {\n        formId,\n        fieldsByPath,\n        values: formValues,\n        controlledValues,\n        errorBag,\n        errors,\n        schema,\n        submitCount,\n        meta,\n        isSubmitting,\n        fieldArrays,\n        keepValuesOnUnmount,\n        validateSchema: unref(schema) ? validateSchema : undefined,\n        validate,\n        register: registerField,\n        unregister: unregisterField,\n        setFieldErrorBag,\n        validateField,\n        setFieldValue,\n        setValues,\n        setErrors,\n        setFieldError,\n        setFieldTouched,\n        setTouched,\n        resetForm,\n        resetField,\n        handleSubmit,\n        stageInitialValue,\n        unsetInitialValue,\n        setFieldInitialValue,\n        useFieldModel,\n    };\n    function isFieldGroup(fieldOrGroup) {\n        return Array.isArray(fieldOrGroup);\n    }\n    function applyFieldMutation(fieldOrGroup, mutation) {\n        if (Array.isArray(fieldOrGroup)) {\n            return fieldOrGroup.forEach(mutation);\n        }\n        return mutation(fieldOrGroup);\n    }\n    function mutateAllFields(mutation) {\n        Object.values(fieldsByPath.value).forEach(field => {\n            if (!field) {\n                return;\n            }\n            // avoid resetting the field values, because they should've been reset already.\n            applyFieldMutation(field, mutation);\n        });\n    }\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldError(field, message) {\n        setFieldErrorBag(field, message);\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrors(fields) {\n        setErrorBag(fields);\n    }\n    /**\n     * Sets a single field value\n     */\n    function setFieldValue(field, value, { force } = { force: false }) {\n        var _a;\n        const fieldInstance = fieldsByPath.value[field];\n        const clonedValue = klona(value);\n        // field wasn't found, create a virtual field as a placeholder\n        if (!fieldInstance) {\n            setInPath(formValues, field, clonedValue);\n            return;\n        }\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n            // Multiple checkboxes, and only one of them got updated\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n            setInPath(formValues, field, newValue);\n            return;\n        }\n        let newValue = clonedValue;\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n        }\n        setInPath(formValues, field, newValue);\n    }\n    /**\n     * Sets multiple fields values\n     */\n    function setValues(fields) {\n        // clean up old values\n        keysOf(formValues).forEach(key => {\n            delete formValues[key];\n        });\n        // set up new values\n        keysOf(fields).forEach(path => {\n            setFieldValue(path, fields[path]);\n        });\n        // regenerate the arrays when the form values change\n        fieldArrays.forEach(f => f && f.reset());\n    }\n    function createModel(path) {\n        const { value } = _useFieldValue(path, undefined, formCtx);\n        watch(value, () => {\n            if (!fieldExists(unref(path))) {\n                validate({ mode: 'validated-only' });\n            }\n        }, {\n            deep: true,\n        });\n        controlledModelPaths.add(unref(path));\n        return value;\n    }\n    function useFieldModel(path) {\n        if (!Array.isArray(path)) {\n            return createModel(path);\n        }\n        return path.map(createModel);\n    }\n    /**\n     * Sets the touched meta state on a field\n     */\n    function setFieldTouched(field, isTouched) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (fieldInstance) {\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n        }\n    }\n    /**\n     * Sets the touched meta state on multiple fields\n     */\n    function setTouched(fields) {\n        keysOf(fields).forEach(field => {\n            setFieldTouched(field, !!fields[field]);\n        });\n    }\n    function resetField(field, state) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (fieldInstance) {\n            applyFieldMutation(fieldInstance, f => f.resetField(state));\n        }\n    }\n    /**\n     * Resets all fields\n     */\n    function resetForm(state) {\n        RESET_LOCK = true;\n        // Reset all field states first\n        mutateAllFields(f => f.resetField());\n        // reset values\n        const newValues = (state === null || state === void 0 ? void 0 : state.values) ? state.values : originalInitialValues.value;\n        setInitialValues(newValues);\n        setValues(newValues);\n        if (state === null || state === void 0 ? void 0 : state.touched) {\n            setTouched(state.touched);\n        }\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n        nextTick(() => {\n            RESET_LOCK = false;\n        });\n    }\n    function insertFieldAtPath(field, path) {\n        const rawField = markRaw(field);\n        const fieldPath = path;\n        // first field at that path\n        if (!fieldsByPath.value[fieldPath]) {\n            fieldsByPath.value[fieldPath] = rawField;\n            return;\n        }\n        const fieldAtPath = fieldsByPath.value[fieldPath];\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\n        }\n        // add the new array to that path\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n    }\n    function removeFieldFromPath(field, path) {\n        const fieldPath = path;\n        const fieldAtPath = fieldsByPath.value[fieldPath];\n        if (!fieldAtPath) {\n            return;\n        }\n        // same field at path\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n            delete fieldsByPath.value[fieldPath];\n            return;\n        }\n        if (isFieldGroup(fieldAtPath)) {\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\n            if (idx === -1) {\n                return;\n            }\n            fieldAtPath.splice(idx, 1);\n            if (!fieldAtPath.length) {\n                delete fieldsByPath.value[fieldPath];\n            }\n        }\n    }\n    function registerField(field) {\n        const fieldPath = unref(field.name);\n        insertFieldAtPath(field, fieldPath);\n        if (isRef(field.name)) {\n            // ensures when a field's name was already taken that it preserves its same value\n            // necessary for fields generated by loops\n            watch(field.name, async (newPath, oldPath) => {\n                // cache the value\n                await nextTick();\n                removeFieldFromPath(field, oldPath);\n                insertFieldAtPath(field, newPath);\n                // re-validate if either path had errors before\n                if (errors.value[oldPath] || errors.value[newPath]) {\n                    // clear up both paths errors\n                    setFieldError(oldPath, undefined);\n                    validateField(newPath);\n                }\n                // clean up the old path if no other field is sharing that name\n                // #3325\n                await nextTick();\n                if (!fieldExists(oldPath)) {\n                    unsetPath(formValues, oldPath);\n                }\n            });\n        }\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n        // #3342\n        const initialErrorMessage = unref(field.errorMessage);\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n            validateField(fieldPath);\n        }\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n        delete initialErrors[fieldPath];\n    }\n    function unregisterField(field) {\n        const fieldName = unref(field.name);\n        const fieldInstance = fieldsByPath.value[fieldName];\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n        removeFieldFromPath(field, fieldName);\n        // clears a field error on unmounted\n        // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n        nextTick(() => {\n            var _a;\n            const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n            const currentGroupValue = getFromPath(formValues, fieldName);\n            // The boolean here is we check if the field still belongs to the same control group with that name\n            // if another group claimed the name, we should avoid handling it since it is no longer the same group\n            // this happens with `v-for` over some checkboxes and field arrays.\n            // also if the group no longer exist we can assume this group was the last one that controlled it\n            const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\n            // group field that still has a dangling value, the field may exist or not after it was removed.\n            // This used to be handled in the useField composable but the form has better context on when it should/not happen.\n            // if it does belong to it that means the group still exists\n            // #3844\n            if (isSameGroup && !shouldKeepValue) {\n                if (Array.isArray(currentGroupValue)) {\n                    const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\n                    if (valueIdx > -1) {\n                        const newVal = [...currentGroupValue];\n                        newVal.splice(valueIdx, 1);\n                        setFieldValue(fieldName, newVal, { force: true });\n                    }\n                }\n                else if (currentGroupValue === unref(field.checkedValue)) {\n                    // Remove field if it is a group but does not have an array value, like for radio inputs #3963\n                    unsetPath(formValues, fieldName);\n                }\n            }\n            // Field was removed entirely, we should unset its path\n            // #3384\n            if (!fieldExists(fieldName)) {\n                setFieldError(fieldName, undefined);\n                // Checks if the field was configured to be unset during unmount or not\n                // Checks both the form-level config and field-level one\n                // Field has the priority if it is set, otherwise it goes to the form settings\n                if (shouldKeepValue) {\n                    return;\n                }\n                // Don't apply emptyContainer check unless the current group value is an array\n                if (isGroup && Array.isArray(currentGroupValue) && !isEmptyContainer(currentGroupValue)) {\n                    return;\n                }\n                unsetPath(formValues, fieldName);\n            }\n        });\n    }\n    async function validate(opts) {\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n        if (mode === 'force') {\n            mutateAllFields(f => (f.meta.validated = true));\n        }\n        if (formCtx.validateSchema) {\n            return formCtx.validateSchema(mode);\n        }\n        // No schema, each field is responsible to validate itself\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\n            if (!fieldInstance) {\n                return Promise.resolve({ key: '', valid: true, errors: [] });\n            }\n            return fieldInstance.validate(opts).then((result) => {\n                return {\n                    key: unref(fieldInstance.name),\n                    valid: result.valid,\n                    errors: result.errors,\n                };\n            });\n        }));\n        const results = {};\n        const errors = {};\n        for (const validation of validations) {\n            results[validation.key] = {\n                valid: validation.valid,\n                errors: validation.errors,\n            };\n            if (validation.errors.length) {\n                errors[validation.key] = validation.errors[0];\n            }\n        }\n        return {\n            valid: validations.every(r => r.valid),\n            results,\n            errors,\n        };\n    }\n    async function validateField(field) {\n        const fieldInstance = fieldsByPath.value[field];\n        if (!fieldInstance) {\n            warn$1(`field with name ${field} was not found`);\n            return Promise.resolve({ errors: [], valid: true });\n        }\n        if (Array.isArray(fieldInstance)) {\n            return fieldInstance.map(f => f.validate())[0];\n        }\n        return fieldInstance.validate();\n    }\n    function unsetInitialValue(path) {\n        unsetPath(initialValues.value, path);\n    }\n    /**\n     * Sneaky function to set initial field values\n     */\n    function stageInitialValue(path, value, updateOriginal = false) {\n        setInPath(formValues, path, value);\n        setFieldInitialValue(path, value);\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n            setInPath(originalInitialValues.value, path, klona(value));\n        }\n    }\n    function setFieldInitialValue(path, value) {\n        setInPath(initialValues.value, path, klona(value));\n    }\n    async function _validateSchema() {\n        const schemaValue = unref(schema);\n        if (!schemaValue) {\n            return { valid: true, results: {}, errors: {} };\n        }\n        const formResult = isYupValidator(schemaValue) || isTypedSchema(schemaValue)\n            ? await validateTypedSchema(schemaValue, formValues)\n            : await validateObjectSchema(schemaValue, formValues, {\n                names: fieldNames.value,\n                bailsMap: fieldBailsMap.value,\n            });\n        return formResult;\n    }\n    const submitForm = handleSubmit((_, { evt }) => {\n        if (isFormSubmitEvent(evt)) {\n            evt.target.submit();\n        }\n    });\n    // Trigger initial validation\n    onMounted(() => {\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n            setErrors(opts.initialErrors);\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n            setTouched(opts.initialTouched);\n        }\n        // if validate on mount was enabled\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n            validate();\n            return;\n        }\n        // otherwise run initial silent validation through schema if available\n        // the useField should skip their own silent validation if a yup schema is present\n        if (formCtx.validateSchema) {\n            formCtx.validateSchema('silent');\n        }\n    });\n    if (isRef(schema)) {\n        watch(schema, () => {\n            var _a;\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n        });\n    }\n    // Provide injections\n    provide(FormContextKey, formCtx);\n    if ((process.env.NODE_ENV !== 'production')) {\n        registerFormWithDevTools(formCtx);\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\n            deep: true,\n        });\n    }\n    return Object.assign(Object.assign({}, formCtx), { handleReset: () => resetForm(), submitForm });\n}\n/**\n * Manages form meta aggregation\n */\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n    const MERGE_STRATEGIES = {\n        touched: 'some',\n        pending: 'some',\n        valid: 'every',\n    };\n    const isDirty = computed(() => {\n        return !isEqual(currentValues, unref(initialValues));\n    });\n    function calculateFlags() {\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n            const mergeMethod = MERGE_STRATEGIES[flag];\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n            return acc;\n        }, {});\n    }\n    const flags = reactive(calculateFlags());\n    watchEffect(() => {\n        const value = calculateFlags();\n        flags.touched = value.touched;\n        flags.valid = value.valid;\n        flags.pending = value.pending;\n    });\n    return computed(() => {\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\n    });\n}\n/**\n * Manages the initial values prop\n */\nfunction useFormInitialValues(fields, formValues, opts) {\n    const values = resolveInitialValues(opts);\n    const providedValues = opts === null || opts === void 0 ? void 0 : opts.initialValues;\n    // these are the mutable initial values as the fields are mounted/unmounted\n    const initialValues = ref(values);\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n    // so these are the values that the reset function should use\n    // these only change when the user explicitly changes the initial values or when the user resets them with new values.\n    const originalInitialValues = ref(klona(values));\n    function setInitialValues(values, updateFields = false) {\n        initialValues.value = klona(values);\n        originalInitialValues.value = klona(values);\n        if (!updateFields) {\n            return;\n        }\n        // update the pristine non-touched fields\n        // those are excluded because it's unlikely you want to change the form values using initial values\n        // we mostly watch them for API population or newly inserted fields\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n        keysOf(fields.value).forEach(fieldPath => {\n            const field = fields.value[fieldPath];\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n            if (!field || wasTouched) {\n                return;\n            }\n            const newValue = getFromPath(initialValues.value, fieldPath);\n            setInPath(formValues, fieldPath, klona(newValue));\n        });\n    }\n    if (isRef(providedValues)) {\n        watch(providedValues, value => {\n            setInitialValues(value, true);\n        }, {\n            deep: true,\n        });\n    }\n    return {\n        initialValues,\n        originalInitialValues,\n        setInitialValues,\n    };\n}\nfunction useErrorBag(initialErrors) {\n    const errorBag = ref({});\n    function normalizeErrorItem(message) {\n        return Array.isArray(message) ? message : message ? [message] : [];\n    }\n    /**\n     * Manually sets an error message on a specific field\n     */\n    function setFieldErrorBag(field, message) {\n        if (!message) {\n            delete errorBag.value[field];\n            return;\n        }\n        errorBag.value[field] = normalizeErrorItem(message);\n    }\n    /**\n     * Sets errors for the fields specified in the object\n     */\n    function setErrorBag(fields) {\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\n            const message = fields[key];\n            if (message) {\n                acc[key] = normalizeErrorItem(message);\n            }\n            return acc;\n        }, {});\n    }\n    if (initialErrors) {\n        setErrorBag(initialErrors);\n    }\n    return {\n        errorBag,\n        setErrorBag,\n        setFieldErrorBag,\n    };\n}\n\nconst FormImpl = defineComponent({\n    name: 'Form',\n    inheritAttrs: false,\n    props: {\n        as: {\n            type: String,\n            default: 'form',\n        },\n        validationSchema: {\n            type: Object,\n            default: undefined,\n        },\n        initialValues: {\n            type: Object,\n            default: undefined,\n        },\n        initialErrors: {\n            type: Object,\n            default: undefined,\n        },\n        initialTouched: {\n            type: Object,\n            default: undefined,\n        },\n        validateOnMount: {\n            type: Boolean,\n            default: false,\n        },\n        onSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        onInvalidSubmit: {\n            type: Function,\n            default: undefined,\n        },\n        keepValues: {\n            type: Boolean,\n            default: false,\n        },\n    },\n    setup(props, ctx) {\n        const initialValues = toRef(props, 'initialValues');\n        const validationSchema = toRef(props, 'validationSchema');\n        const keepValues = toRef(props, 'keepValues');\n        const { errors, errorBag, values, meta, isSubmitting, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, resetField, } = useForm({\n            validationSchema: validationSchema.value ? validationSchema : undefined,\n            initialValues,\n            initialErrors: props.initialErrors,\n            initialTouched: props.initialTouched,\n            validateOnMount: props.validateOnMount,\n            keepValuesOnUnmount: keepValues,\n        });\n        const submitForm = handleSubmit((_, { evt }) => {\n            if (isFormSubmitEvent(evt)) {\n                evt.target.submit();\n            }\n        }, props.onInvalidSubmit);\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n        function handleFormReset(e) {\n            if (isEvent(e)) {\n                // Prevent default form reset behavior\n                e.preventDefault();\n            }\n            handleReset();\n            if (typeof ctx.attrs.onReset === 'function') {\n                ctx.attrs.onReset();\n            }\n        }\n        function handleScopedSlotSubmit(evt, onSubmit) {\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n        }\n        function getValues() {\n            return klona(values);\n        }\n        function getMeta() {\n            return klona(meta.value);\n        }\n        function getErrors() {\n            return klona(errors.value);\n        }\n        function slotProps() {\n            return {\n                meta: meta.value,\n                errors: errors.value,\n                errorBag: errorBag.value,\n                values,\n                isSubmitting: isSubmitting.value,\n                submitCount: submitCount.value,\n                controlledValues: controlledValues.value,\n                validate,\n                validateField,\n                handleSubmit: handleScopedSlotSubmit,\n                handleReset,\n                submitForm,\n                setErrors,\n                setFieldError,\n                setFieldValue,\n                setValues,\n                setFieldTouched,\n                setTouched,\n                resetForm,\n                resetField,\n                getValues,\n                getMeta,\n                getErrors,\n            };\n        }\n        // expose these functions and methods as part of public API\n        ctx.expose({\n            setFieldError,\n            setErrors,\n            setFieldValue,\n            setValues,\n            setFieldTouched,\n            setTouched,\n            resetForm,\n            validate,\n            validateField,\n            resetField,\n            getValues,\n            getMeta,\n            getErrors,\n        });\n        return function renderForm() {\n            // avoid resolving the form component as itself\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            if (!props.as) {\n                return children;\n            }\n            // Attributes to add on a native `form` tag\n            const formAttrs = props.as === 'form'\n                ? {\n                    // Disables native validation as vee-validate will handle it.\n                    novalidate: true,\n                }\n                : {};\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\n        };\n    },\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n    const form = injectWithSelf(FormContextKey, undefined);\n    const fields = ref([]);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const noOp = () => { };\n    const noOpApi = {\n        fields,\n        remove: noOp,\n        push: noOp,\n        swap: noOp,\n        insert: noOp,\n        update: noOp,\n        replace: noOp,\n        prepend: noOp,\n        move: noOp,\n    };\n    if (!form) {\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n        return noOpApi;\n    }\n    if (!unref(arrayPath)) {\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n        return noOpApi;\n    }\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n    if (alreadyExists) {\n        return alreadyExists;\n    }\n    let entryCounter = 0;\n    function getCurrentValues() {\n        return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    }\n    function initFields() {\n        const currentValues = getCurrentValues();\n        fields.value = currentValues.map(createEntry);\n        updateEntryFlags();\n    }\n    initFields();\n    function updateEntryFlags() {\n        const fieldsLength = fields.value.length;\n        for (let i = 0; i < fieldsLength; i++) {\n            const entry = fields.value[i];\n            entry.isFirst = i === 0;\n            entry.isLast = i === fieldsLength - 1;\n        }\n    }\n    function createEntry(value) {\n        const key = entryCounter++;\n        const entry = {\n            key,\n            value: computedDeep({\n                get() {\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    return idx === -1 ? value : currentValues[idx];\n                },\n                set(value) {\n                    const idx = fields.value.findIndex(e => e.key === key);\n                    if (idx === -1) {\n                        warn(`Attempting to update a non-existent array item`);\n                        return;\n                    }\n                    update(idx, value);\n                },\n            }),\n            isFirst: false,\n            isLast: false,\n        };\n        return entry;\n    }\n    function afterMutation() {\n        updateEntryFlags();\n        // Should trigger a silent validation since a field may not do that #4096\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'silent' });\n    }\n    function remove(idx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!pathValue || !Array.isArray(pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        newValue.splice(idx, 1);\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.splice(idx, 1);\n        afterMutation();\n    }\n    function push(value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [...normalizedPathValue];\n        newValue.push(value);\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.push(createEntry(value));\n        afterMutation();\n    }\n    function swap(indexA, indexB) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        // the old switcheroo\n        const temp = newValue[indexA];\n        newValue[indexA] = newValue[indexB];\n        newValue[indexB] = temp;\n        const tempEntry = newFields[indexA];\n        newFields[indexA] = newFields[indexB];\n        newFields[indexB] = tempEntry;\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        updateEntryFlags();\n    }\n    function insert(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\n            return;\n        }\n        const newValue = [...pathValue];\n        const newFields = [...fields.value];\n        newValue.splice(idx, 0, value);\n        newFields.splice(idx, 0, createEntry(value));\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    function replace(arr) {\n        const pathName = unref(arrayPath);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n        initFields();\n        afterMutation();\n    }\n    function update(idx, value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n            return;\n        }\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\n    }\n    function prepend(value) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n        if (!Array.isArray(normalizedPathValue)) {\n            return;\n        }\n        const newValue = [value, ...normalizedPathValue];\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value.unshift(createEntry(value));\n        afterMutation();\n    }\n    function move(oldIdx, newIdx) {\n        const pathName = unref(arrayPath);\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n            return;\n        }\n        const newFields = [...fields.value];\n        const movedItem = newFields[oldIdx];\n        newFields.splice(oldIdx, 1);\n        newFields.splice(newIdx, 0, movedItem);\n        const movedValue = newValue[oldIdx];\n        newValue.splice(oldIdx, 1);\n        newValue.splice(newIdx, 0, movedValue);\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n        fields.value = newFields;\n        afterMutation();\n    }\n    const fieldArrayCtx = {\n        fields,\n        remove,\n        push,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move,\n    };\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\n    onBeforeUnmount(() => {\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n        if (idx >= 0) {\n            form.fieldArrays.splice(idx, 1);\n        }\n    });\n    // Makes sure to sync the form values with the array value if they go out of sync\n    // #4153\n    watch(getCurrentValues, formValues => {\n        const fieldsValues = fields.value.map(f => f.value);\n        // If form values are not the same as the current values then something overrode them.\n        if (!isEqual(formValues, fieldsValues)) {\n            initFields();\n        }\n    });\n    return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = defineComponent({\n    name: 'FieldArray',\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\n        function slotProps() {\n            return {\n                fields: fields.value,\n                push,\n                remove,\n                swap,\n                insert,\n                update,\n                replace,\n                prepend,\n                move,\n            };\n        }\n        ctx.expose({\n            push,\n            remove,\n            swap,\n            insert,\n            update,\n            replace,\n            prepend,\n            move,\n        });\n        return () => {\n            const children = normalizeChildren(undefined, ctx, slotProps);\n            return children;\n        };\n    },\n});\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\n    name: 'ErrorMessage',\n    props: {\n        as: {\n            type: String,\n            default: undefined,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n    },\n    setup(props, ctx) {\n        const form = inject(FormContextKey, undefined);\n        const message = computed(() => {\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n        });\n        function slotProps() {\n            return {\n                message: message.value,\n            };\n        }\n        return () => {\n            // Renders nothing if there are no messages\n            if (!message.value) {\n                return undefined;\n            }\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\n            const children = normalizeChildren(tag, ctx, slotProps);\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\n            // If no tag was specified and there are children\n            // render the slot as is without wrapping it\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n                return children;\n            }\n            // If no children in slot\n            // render whatever specified and fallback to a <span> with the message in it's contents\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n                return h(tag || 'span', attrs, message.value);\n            }\n            return h(tag, attrs, children);\n        };\n    },\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function resetForm(state) {\n        if (!form) {\n            return;\n        }\n        return form.resetForm(state);\n    };\n}\n\n/**\n * If a field is dirty or not\n */\nfunction useIsFieldDirty(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.dirty;\n    });\n}\n\n/**\n * If a field is touched or not\n */\nfunction useIsFieldTouched(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.touched;\n    });\n}\n\n/**\n * If a field is validated and is valid\n */\nfunction useIsFieldValid(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return false;\n        }\n        return field.meta.valid;\n    });\n}\n\n/**\n * If the form is submitting or not\n */\nfunction useIsSubmitting() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validates a single field\n */\nfunction useValidateField(path) {\n    const form = injectWithSelf(FormContextKey);\n    let field = path ? undefined : inject(FieldContextKey);\n    return function validateField() {\n        if (path) {\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n        }\n        if (!field) {\n            warn(`field with name ${unref(path)} was not found`);\n            return Promise.resolve({\n                errors: [],\n                valid: true,\n            });\n        }\n        return field.validate();\n    };\n}\n\n/**\n * If the form is dirty or not\n */\nfunction useIsFormDirty() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form is touched or not\n */\nfunction useIsFormTouched() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * If the form has been validated and is valid\n */\nfunction useIsFormValid() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n    });\n}\n\n/**\n * Validate multiple fields\n */\nfunction useValidateForm() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return function validateField() {\n        if (!form) {\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\n        }\n        return form.validate();\n    };\n}\n\n/**\n * The number of form's submission count\n */\nfunction useSubmitCount() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        var _a;\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n    });\n}\n\n/**\n * Gives access to a field's current value\n */\nfunction useFieldValue(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n        }\n        return unref(field === null || field === void 0 ? void 0 : field.value);\n    });\n}\n\n/**\n * Gives access to a form's values\n */\nfunction useFormValues() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\n    });\n}\n\n/**\n * Gives access to all form errors\n */\nfunction useFormErrors() {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    return computed(() => {\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\n    });\n}\n\n/**\n * Gives access to a single field error\n */\nfunction useFieldError(path) {\n    const form = injectWithSelf(FormContextKey);\n    // We don't want to use self injected context as it doesn't make sense\n    const field = path ? undefined : inject(FieldContextKey);\n    return computed(() => {\n        if (path) {\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n        }\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n    });\n}\n\nfunction useSubmitForm(cb) {\n    const form = injectWithSelf(FormContextKey);\n    if (!form) {\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n    }\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\n    return function submitForm(e) {\n        if (!onSubmit) {\n            return;\n        }\n        return onSubmit(e);\n    };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate, validateObjectSchema as validateObject };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import PopupModal from './PopupModal.vue';\nexport default {\n  name: 'ConfirmDialogue',\n  components: {\n    PopupModal\n  },\n  data: () => ({\n    // Parameters that change depending on the type of dialogue\n    title: undefined,\n    message: undefined,\n    // Main text content\n    okButton: undefined,\n    // Text for confirm button; leave it empty because we don't know what we're using it for\n    cancelButton: 'Go Back',\n    // text for cancel button\n\n    // Private variables\n    resolvePromise: undefined,\n    rejectPromise: undefined\n  }),\n  methods: {\n    show(opts = {}) {\n      this.title = opts.title;\n      this.message = opts.message;\n      this.okButton = opts.okButton;\n      if (opts.cancelButton) {\n        this.cancelButton = opts.cancelButton;\n      }\n      // Once we set our config, we tell the popup modal to open\n      this.$refs.popup.open();\n      // Return promise so the caller can get results\n      return new Promise((resolve, reject) => {\n        this.resolvePromise = resolve;\n        this.rejectPromise = reject;\n      });\n    },\n    _confirm() {\n      this.$refs.popup.close();\n      this.resolvePromise(true);\n    },\n    _cancel() {\n      this.$refs.popup.close();\n      this.resolvePromise(false);\n      // Or you can throw an error\n      // this.rejectPromise(new Error('User canceled the dialogue'))\n    }\n  }\n};","map":{"version":3,"names":["PopupModal","name","components","data","title","undefined","message","okButton","cancelButton","resolvePromise","rejectPromise","methods","show","opts","$refs","popup","open","Promise","resolve","reject","_confirm","close","_cancel"],"sources":["/Applications/MAMP/htdocs/Vue/Demo/restaurant-app/restaurent-app/src/components/ConfirmDialogue.vue"],"sourcesContent":["<template>\n    <popup-modal ref=\"popup\">\n        <h2 style=\"margin-top: 0\">{{ title }}</h2>\n        <p>{{ message }}</p>\n        <div class=\"btns\">\n            <button class=\"cancel-btn\" @click=\"_cancel\">{{ cancelButton }}</button>\n            <span class=\"ok-btn\" @click=\"_confirm\">{{ okButton }}</span>\n        </div>\n    </popup-modal>\n</template>\n\n<script>\nimport PopupModal from './PopupModal.vue'\n\nexport default {\n    name: 'ConfirmDialogue',\n\n    components: { PopupModal },\n\n    data: () => ({\n        // Parameters that change depending on the type of dialogue\n        title: undefined,\n        message: undefined, // Main text content\n        okButton: undefined, // Text for confirm button; leave it empty because we don't know what we're using it for\n        cancelButton: 'Go Back', // text for cancel button\n\n        // Private variables\n        resolvePromise: undefined,\n        rejectPromise: undefined,\n    }),\n\n    methods: {\n        show(opts = {}) {\n            this.title = opts.title\n            this.message = opts.message\n            this.okButton = opts.okButton\n            if (opts.cancelButton) {\n                this.cancelButton = opts.cancelButton\n            }\n            // Once we set our config, we tell the popup modal to open\n            this.$refs.popup.open()\n            // Return promise so the caller can get results\n            return new Promise((resolve, reject) => {\n                this.resolvePromise = resolve\n                this.rejectPromise = reject\n            })\n        },\n\n        _confirm() {\n            this.$refs.popup.close()\n            this.resolvePromise(true)\n        },\n\n        _cancel() {\n            this.$refs.popup.close()\n            this.resolvePromise(false)\n            // Or you can throw an error\n            // this.rejectPromise(new Error('User canceled the dialogue'))\n        },\n    },\n}\n</script>\n\n\n<style scoped>\n.btns {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n}\n\n.ok-btn {\n    color: red;\n    text-decoration: underline;\n    line-height: 2.5rem;\n    cursor: pointer;\n}\n\n.cancel-btn {\n    padding: 0.5em 1em;\n    background-color: #d5eae7;\n    color: #35907f;\n    border: 2px solid #0ec5a4;\n    border-radius: 5px;\n    font-weight: bold;\n    font-size: 16px;\n    text-transform: uppercase;\n    cursor: pointer;\n}\n</style>"],"mappings":"AAYA,OAAOA,UAAS,MAAO,kBAAiB;AAExC,eAAe;EACXC,IAAI,EAAE,iBAAiB;EAEvBC,UAAU,EAAE;IAAEF;EAAW,CAAC;EAE1BG,IAAI,EAAEA,CAAA,MAAO;IACT;IACAC,KAAK,EAAEC,SAAS;IAChBC,OAAO,EAAED,SAAS;IAAE;IACpBE,QAAQ,EAAEF,SAAS;IAAE;IACrBG,YAAY,EAAE,SAAS;IAAE;;IAEzB;IACAC,cAAc,EAAEJ,SAAS;IACzBK,aAAa,EAAEL;EACnB,CAAC,CAAC;EAEFM,OAAO,EAAE;IACLC,IAAIA,CAACC,IAAG,GAAI,CAAC,CAAC,EAAE;MACZ,IAAI,CAACT,KAAI,GAAIS,IAAI,CAACT,KAAI;MACtB,IAAI,CAACE,OAAM,GAAIO,IAAI,CAACP,OAAM;MAC1B,IAAI,CAACC,QAAO,GAAIM,IAAI,CAACN,QAAO;MAC5B,IAAIM,IAAI,CAACL,YAAY,EAAE;QACnB,IAAI,CAACA,YAAW,GAAIK,IAAI,CAACL,YAAW;MACxC;MACA;MACA,IAAI,CAACM,KAAK,CAACC,KAAK,CAACC,IAAI,EAAC;MACtB;MACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC,IAAI,CAACV,cAAa,GAAIS,OAAM;QAC5B,IAAI,CAACR,aAAY,GAAIS,MAAK;MAC9B,CAAC;IACL,CAAC;IAEDC,QAAQA,CAAA,EAAG;MACP,IAAI,CAACN,KAAK,CAACC,KAAK,CAACM,KAAK,EAAC;MACvB,IAAI,CAACZ,cAAc,CAAC,IAAI;IAC5B,CAAC;IAEDa,OAAOA,CAAA,EAAG;MACN,IAAI,CAACR,KAAK,CAACC,KAAK,CAACM,KAAK,EAAC;MACvB,IAAI,CAACZ,cAAc,CAAC,KAAK;MACzB;MACA;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}